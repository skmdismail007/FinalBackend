// source: messages-osmosis.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.OsmosisAddress', null, global);
goog.exportSymbol('proto.OsmosisGetAddress', null, global);
goog.exportSymbol('proto.OsmosisMsgAck', null, global);
goog.exportSymbol('proto.OsmosisMsgDelegate', null, global);
goog.exportSymbol('proto.OsmosisMsgIBCTransfer', null, global);
goog.exportSymbol('proto.OsmosisMsgLPAdd', null, global);
goog.exportSymbol('proto.OsmosisMsgLPRemove', null, global);
goog.exportSymbol('proto.OsmosisMsgLPStake', null, global);
goog.exportSymbol('proto.OsmosisMsgLPUnstake', null, global);
goog.exportSymbol('proto.OsmosisMsgRedelegate', null, global);
goog.exportSymbol('proto.OsmosisMsgRequest', null, global);
goog.exportSymbol('proto.OsmosisMsgRewards', null, global);
goog.exportSymbol('proto.OsmosisMsgSend', null, global);
goog.exportSymbol('proto.OsmosisMsgSwap', null, global);
goog.exportSymbol('proto.OsmosisMsgUndelegate', null, global);
goog.exportSymbol('proto.OsmosisSignTx', null, global);
goog.exportSymbol('proto.OsmosisSignedTx', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisGetAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OsmosisGetAddress.repeatedFields_, null);
};
goog.inherits(proto.OsmosisGetAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisGetAddress.displayName = 'proto.OsmosisGetAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisAddress.displayName = 'proto.OsmosisAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OsmosisSignTx.repeatedFields_, null);
};
goog.inherits(proto.OsmosisSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisSignTx.displayName = 'proto.OsmosisSignTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgRequest.displayName = 'proto.OsmosisMsgRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgAck.displayName = 'proto.OsmosisMsgAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgSend.displayName = 'proto.OsmosisMsgSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgDelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgDelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgDelegate.displayName = 'proto.OsmosisMsgDelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgUndelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgUndelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgUndelegate.displayName = 'proto.OsmosisMsgUndelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgRedelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgRedelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgRedelegate.displayName = 'proto.OsmosisMsgRedelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgLPAdd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgLPAdd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgLPAdd.displayName = 'proto.OsmosisMsgLPAdd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgLPRemove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgLPRemove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgLPRemove.displayName = 'proto.OsmosisMsgLPRemove';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgLPStake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgLPStake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgLPStake.displayName = 'proto.OsmosisMsgLPStake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgLPUnstake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgLPUnstake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgLPUnstake.displayName = 'proto.OsmosisMsgLPUnstake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgRewards = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgRewards, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgRewards.displayName = 'proto.OsmosisMsgRewards';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgIBCTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgIBCTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgIBCTransfer.displayName = 'proto.OsmosisMsgIBCTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisMsgSwap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisMsgSwap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisMsgSwap.displayName = 'proto.OsmosisMsgSwap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmosisSignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmosisSignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OsmosisSignedTx.displayName = 'proto.OsmosisSignedTx';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OsmosisGetAddress.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisGetAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisGetAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisGetAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisGetAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    showDisplay: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisGetAddress}
 */
proto.OsmosisGetAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisGetAddress;
  return proto.OsmosisGetAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisGetAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisGetAddress}
 */
proto.OsmosisGetAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowDisplay(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisGetAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisGetAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisGetAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisGetAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.OsmosisGetAddress.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional bool show_display = 2;
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.getShowDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.setShowDisplay = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.clearShowDisplay = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.hasShowDisplay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool testnet = 3;
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisGetAddress} returns this
 */
proto.OsmosisGetAddress.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisGetAddress.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisAddress}
 */
proto.OsmosisAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisAddress;
  return proto.OsmosisAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisAddress}
 */
proto.OsmosisAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.OsmosisAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisAddress} returns this
 */
proto.OsmosisAddress.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisAddress} returns this
 */
proto.OsmosisAddress.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisAddress.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OsmosisSignTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    accountNumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    chainId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    feeAmount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    gas: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    memo: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    sequence: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    msgCount: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisSignTx}
 */
proto.OsmosisSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisSignTx;
  return proto.OsmosisSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisSignTx}
 */
proto.OsmosisSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeeAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGas(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSequence(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgCount(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64String(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.OsmosisSignTx.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional uint64 account_number = 2;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setAccountNumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearAccountNumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasAccountNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setChainId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearChainId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasChainId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 fee_amount = 4;
 * @return {number}
 */
proto.OsmosisSignTx.prototype.getFeeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setFeeAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearFeeAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasFeeAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 gas = 5;
 * @return {number}
 */
proto.OsmosisSignTx.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setGas = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearGas = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasGas = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 sequence = 7;
 * @return {string}
 */
proto.OsmosisSignTx.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setSequence = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearSequence = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 msg_count = 8;
 * @return {number}
 */
proto.OsmosisSignTx.prototype.getMsgCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setMsgCount = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearMsgCount = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasMsgCount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool testnet = 9;
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignTx} returns this
 */
proto.OsmosisSignTx.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignTx.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgRequest}
 */
proto.OsmosisMsgRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgRequest;
  return proto.OsmosisMsgRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgRequest}
 */
proto.OsmosisMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgAck.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    send: (f = msg.getSend()) && proto.OsmosisMsgSend.toObject(includeInstance, f),
    delegate: (f = msg.getDelegate()) && proto.OsmosisMsgDelegate.toObject(includeInstance, f),
    undelegate: (f = msg.getUndelegate()) && proto.OsmosisMsgUndelegate.toObject(includeInstance, f),
    redelegate: (f = msg.getRedelegate()) && proto.OsmosisMsgRedelegate.toObject(includeInstance, f),
    rewards: (f = msg.getRewards()) && proto.OsmosisMsgRewards.toObject(includeInstance, f),
    lpAdd: (f = msg.getLpAdd()) && proto.OsmosisMsgLPAdd.toObject(includeInstance, f),
    lpRemove: (f = msg.getLpRemove()) && proto.OsmosisMsgLPRemove.toObject(includeInstance, f),
    lpStake: (f = msg.getLpStake()) && proto.OsmosisMsgLPStake.toObject(includeInstance, f),
    lpUnstake: (f = msg.getLpUnstake()) && proto.OsmosisMsgLPUnstake.toObject(includeInstance, f),
    ibcTransfer: (f = msg.getIbcTransfer()) && proto.OsmosisMsgIBCTransfer.toObject(includeInstance, f),
    swap: (f = msg.getSwap()) && proto.OsmosisMsgSwap.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgAck}
 */
proto.OsmosisMsgAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgAck;
  return proto.OsmosisMsgAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgAck}
 */
proto.OsmosisMsgAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.OsmosisMsgSend;
      reader.readMessage(value,proto.OsmosisMsgSend.deserializeBinaryFromReader);
      msg.setSend(value);
      break;
    case 2:
      var value = new proto.OsmosisMsgDelegate;
      reader.readMessage(value,proto.OsmosisMsgDelegate.deserializeBinaryFromReader);
      msg.setDelegate(value);
      break;
    case 3:
      var value = new proto.OsmosisMsgUndelegate;
      reader.readMessage(value,proto.OsmosisMsgUndelegate.deserializeBinaryFromReader);
      msg.setUndelegate(value);
      break;
    case 4:
      var value = new proto.OsmosisMsgRedelegate;
      reader.readMessage(value,proto.OsmosisMsgRedelegate.deserializeBinaryFromReader);
      msg.setRedelegate(value);
      break;
    case 5:
      var value = new proto.OsmosisMsgRewards;
      reader.readMessage(value,proto.OsmosisMsgRewards.deserializeBinaryFromReader);
      msg.setRewards(value);
      break;
    case 6:
      var value = new proto.OsmosisMsgLPAdd;
      reader.readMessage(value,proto.OsmosisMsgLPAdd.deserializeBinaryFromReader);
      msg.setLpAdd(value);
      break;
    case 7:
      var value = new proto.OsmosisMsgLPRemove;
      reader.readMessage(value,proto.OsmosisMsgLPRemove.deserializeBinaryFromReader);
      msg.setLpRemove(value);
      break;
    case 8:
      var value = new proto.OsmosisMsgLPStake;
      reader.readMessage(value,proto.OsmosisMsgLPStake.deserializeBinaryFromReader);
      msg.setLpStake(value);
      break;
    case 9:
      var value = new proto.OsmosisMsgLPUnstake;
      reader.readMessage(value,proto.OsmosisMsgLPUnstake.deserializeBinaryFromReader);
      msg.setLpUnstake(value);
      break;
    case 10:
      var value = new proto.OsmosisMsgIBCTransfer;
      reader.readMessage(value,proto.OsmosisMsgIBCTransfer.deserializeBinaryFromReader);
      msg.setIbcTransfer(value);
      break;
    case 11:
      var value = new proto.OsmosisMsgSwap;
      reader.readMessage(value,proto.OsmosisMsgSwap.deserializeBinaryFromReader);
      msg.setSwap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.OsmosisMsgSend.serializeBinaryToWriter
    );
  }
  f = message.getDelegate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.OsmosisMsgDelegate.serializeBinaryToWriter
    );
  }
  f = message.getUndelegate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.OsmosisMsgUndelegate.serializeBinaryToWriter
    );
  }
  f = message.getRedelegate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.OsmosisMsgRedelegate.serializeBinaryToWriter
    );
  }
  f = message.getRewards();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.OsmosisMsgRewards.serializeBinaryToWriter
    );
  }
  f = message.getLpAdd();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.OsmosisMsgLPAdd.serializeBinaryToWriter
    );
  }
  f = message.getLpRemove();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.OsmosisMsgLPRemove.serializeBinaryToWriter
    );
  }
  f = message.getLpStake();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.OsmosisMsgLPStake.serializeBinaryToWriter
    );
  }
  f = message.getLpUnstake();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.OsmosisMsgLPUnstake.serializeBinaryToWriter
    );
  }
  f = message.getIbcTransfer();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.OsmosisMsgIBCTransfer.serializeBinaryToWriter
    );
  }
  f = message.getSwap();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.OsmosisMsgSwap.serializeBinaryToWriter
    );
  }
};


/**
 * optional OsmosisMsgSend send = 1;
 * @return {?proto.OsmosisMsgSend}
 */
proto.OsmosisMsgAck.prototype.getSend = function() {
  return /** @type{?proto.OsmosisMsgSend} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgSend, 1));
};


/**
 * @param {?proto.OsmosisMsgSend|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setSend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearSend = function() {
  return this.setSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasSend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional OsmosisMsgDelegate delegate = 2;
 * @return {?proto.OsmosisMsgDelegate}
 */
proto.OsmosisMsgAck.prototype.getDelegate = function() {
  return /** @type{?proto.OsmosisMsgDelegate} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgDelegate, 2));
};


/**
 * @param {?proto.OsmosisMsgDelegate|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setDelegate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearDelegate = function() {
  return this.setDelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasDelegate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OsmosisMsgUndelegate undelegate = 3;
 * @return {?proto.OsmosisMsgUndelegate}
 */
proto.OsmosisMsgAck.prototype.getUndelegate = function() {
  return /** @type{?proto.OsmosisMsgUndelegate} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgUndelegate, 3));
};


/**
 * @param {?proto.OsmosisMsgUndelegate|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setUndelegate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearUndelegate = function() {
  return this.setUndelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasUndelegate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional OsmosisMsgRedelegate redelegate = 4;
 * @return {?proto.OsmosisMsgRedelegate}
 */
proto.OsmosisMsgAck.prototype.getRedelegate = function() {
  return /** @type{?proto.OsmosisMsgRedelegate} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgRedelegate, 4));
};


/**
 * @param {?proto.OsmosisMsgRedelegate|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setRedelegate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearRedelegate = function() {
  return this.setRedelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasRedelegate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OsmosisMsgRewards rewards = 5;
 * @return {?proto.OsmosisMsgRewards}
 */
proto.OsmosisMsgAck.prototype.getRewards = function() {
  return /** @type{?proto.OsmosisMsgRewards} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgRewards, 5));
};


/**
 * @param {?proto.OsmosisMsgRewards|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setRewards = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearRewards = function() {
  return this.setRewards(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasRewards = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional OsmosisMsgLPAdd lp_add = 6;
 * @return {?proto.OsmosisMsgLPAdd}
 */
proto.OsmosisMsgAck.prototype.getLpAdd = function() {
  return /** @type{?proto.OsmosisMsgLPAdd} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgLPAdd, 6));
};


/**
 * @param {?proto.OsmosisMsgLPAdd|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setLpAdd = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearLpAdd = function() {
  return this.setLpAdd(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasLpAdd = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional OsmosisMsgLPRemove lp_remove = 7;
 * @return {?proto.OsmosisMsgLPRemove}
 */
proto.OsmosisMsgAck.prototype.getLpRemove = function() {
  return /** @type{?proto.OsmosisMsgLPRemove} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgLPRemove, 7));
};


/**
 * @param {?proto.OsmosisMsgLPRemove|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setLpRemove = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearLpRemove = function() {
  return this.setLpRemove(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasLpRemove = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OsmosisMsgLPStake lp_stake = 8;
 * @return {?proto.OsmosisMsgLPStake}
 */
proto.OsmosisMsgAck.prototype.getLpStake = function() {
  return /** @type{?proto.OsmosisMsgLPStake} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgLPStake, 8));
};


/**
 * @param {?proto.OsmosisMsgLPStake|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setLpStake = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearLpStake = function() {
  return this.setLpStake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasLpStake = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OsmosisMsgLPUnstake lp_unstake = 9;
 * @return {?proto.OsmosisMsgLPUnstake}
 */
proto.OsmosisMsgAck.prototype.getLpUnstake = function() {
  return /** @type{?proto.OsmosisMsgLPUnstake} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgLPUnstake, 9));
};


/**
 * @param {?proto.OsmosisMsgLPUnstake|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setLpUnstake = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearLpUnstake = function() {
  return this.setLpUnstake(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasLpUnstake = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional OsmosisMsgIBCTransfer ibc_transfer = 10;
 * @return {?proto.OsmosisMsgIBCTransfer}
 */
proto.OsmosisMsgAck.prototype.getIbcTransfer = function() {
  return /** @type{?proto.OsmosisMsgIBCTransfer} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgIBCTransfer, 10));
};


/**
 * @param {?proto.OsmosisMsgIBCTransfer|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setIbcTransfer = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearIbcTransfer = function() {
  return this.setIbcTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasIbcTransfer = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional OsmosisMsgSwap swap = 11;
 * @return {?proto.OsmosisMsgSwap}
 */
proto.OsmosisMsgAck.prototype.getSwap = function() {
  return /** @type{?proto.OsmosisMsgSwap} */ (
    jspb.Message.getWrapperField(this, proto.OsmosisMsgSwap, 11));
};


/**
 * @param {?proto.OsmosisMsgSwap|undefined} value
 * @return {!proto.OsmosisMsgAck} returns this
*/
proto.OsmosisMsgAck.prototype.setSwap = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.OsmosisMsgAck} returns this
 */
proto.OsmosisMsgAck.prototype.clearSwap = function() {
  return this.setSwap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgAck.prototype.hasSwap = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgSend.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSend.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    toAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    denom: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    addressType: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgSend}
 */
proto.OsmosisMsgSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgSend;
  return proto.OsmosisMsgSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgSend}
 */
proto.OsmosisMsgSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {!proto.OutputAddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.OutputAddressType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string from_address = 1;
 * @return {string}
 */
proto.OsmosisMsgSend.prototype.getFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setFromAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearFromAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasFromAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string to_address = 2;
 * @return {string}
 */
proto.OsmosisMsgSend.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setToAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearToAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasToAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string denom = 3;
 * @return {string}
 */
proto.OsmosisMsgSend.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.OsmosisMsgSend.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional OutputAddressType address_type = 5;
 * @return {!proto.OutputAddressType}
 */
proto.OsmosisMsgSend.prototype.getAddressType = function() {
  return /** @type {!proto.OutputAddressType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.OutputAddressType} value
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.setAddressType = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSend} returns this
 */
proto.OsmosisMsgSend.prototype.clearAddressType = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSend.prototype.hasAddressType = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgDelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgDelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgDelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgDelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatorAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    validatorAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    denom: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgDelegate}
 */
proto.OsmosisMsgDelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgDelegate;
  return proto.OsmosisMsgDelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgDelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgDelegate}
 */
proto.OsmosisMsgDelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgDelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgDelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgDelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgDelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string delegator_address = 1;
 * @return {string}
 */
proto.OsmosisMsgDelegate.prototype.getDelegatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.setDelegatorAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.clearDelegatorAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgDelegate.prototype.hasDelegatorAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string validator_address = 2;
 * @return {string}
 */
proto.OsmosisMsgDelegate.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.clearValidatorAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgDelegate.prototype.hasValidatorAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string denom = 3;
 * @return {string}
 */
proto.OsmosisMsgDelegate.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgDelegate.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.OsmosisMsgDelegate.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgDelegate} returns this
 */
proto.OsmosisMsgDelegate.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgDelegate.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgUndelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgUndelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgUndelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgUndelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatorAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    validatorAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    denom: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgUndelegate}
 */
proto.OsmosisMsgUndelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgUndelegate;
  return proto.OsmosisMsgUndelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgUndelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgUndelegate}
 */
proto.OsmosisMsgUndelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgUndelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgUndelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgUndelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgUndelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string delegator_address = 1;
 * @return {string}
 */
proto.OsmosisMsgUndelegate.prototype.getDelegatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.setDelegatorAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.clearDelegatorAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgUndelegate.prototype.hasDelegatorAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string validator_address = 2;
 * @return {string}
 */
proto.OsmosisMsgUndelegate.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.clearValidatorAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgUndelegate.prototype.hasValidatorAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string denom = 3;
 * @return {string}
 */
proto.OsmosisMsgUndelegate.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgUndelegate.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.OsmosisMsgUndelegate.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgUndelegate} returns this
 */
proto.OsmosisMsgUndelegate.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgUndelegate.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgRedelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgRedelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgRedelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRedelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatorAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    validatorSrcAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    validatorDstAddress: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    denom: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgRedelegate}
 */
proto.OsmosisMsgRedelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgRedelegate;
  return proto.OsmosisMsgRedelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgRedelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgRedelegate}
 */
proto.OsmosisMsgRedelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorSrcAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorDstAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgRedelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgRedelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgRedelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRedelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string delegator_address = 1;
 * @return {string}
 */
proto.OsmosisMsgRedelegate.prototype.getDelegatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.setDelegatorAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.clearDelegatorAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgRedelegate.prototype.hasDelegatorAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string validator_src_address = 2;
 * @return {string}
 */
proto.OsmosisMsgRedelegate.prototype.getValidatorSrcAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.setValidatorSrcAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.clearValidatorSrcAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgRedelegate.prototype.hasValidatorSrcAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string validator_dst_address = 3;
 * @return {string}
 */
proto.OsmosisMsgRedelegate.prototype.getValidatorDstAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.setValidatorDstAddress = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.clearValidatorDstAddress = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgRedelegate.prototype.hasValidatorDstAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string denom = 4;
 * @return {string}
 */
proto.OsmosisMsgRedelegate.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgRedelegate.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string amount = 5;
 * @return {string}
 */
proto.OsmosisMsgRedelegate.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgRedelegate} returns this
 */
proto.OsmosisMsgRedelegate.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgRedelegate.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgLPAdd.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgLPAdd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgLPAdd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPAdd.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    poolId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    shareOutAmount: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    denomInMaxA: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    amountInMaxA: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    denomInMaxB: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    amountInMaxB: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgLPAdd}
 */
proto.OsmosisMsgLPAdd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgLPAdd;
  return proto.OsmosisMsgLPAdd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgLPAdd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgLPAdd}
 */
proto.OsmosisMsgLPAdd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPoolId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareOutAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenomInMaxA(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountInMaxA(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenomInMaxB(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountInMaxB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgLPAdd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgLPAdd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgLPAdd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPAdd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 pool_id = 2;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getPoolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setPoolId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearPoolId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasPoolId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string share_out_amount = 3;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getShareOutAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setShareOutAmount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearShareOutAmount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasShareOutAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string denom_in_max_a = 4;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getDenomInMaxA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setDenomInMaxA = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearDenomInMaxA = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasDenomInMaxA = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string amount_in_max_a = 5;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getAmountInMaxA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setAmountInMaxA = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearAmountInMaxA = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasAmountInMaxA = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string denom_in_max_b = 6;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getDenomInMaxB = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setDenomInMaxB = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearDenomInMaxB = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasDenomInMaxB = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string amount_in_max_b = 7;
 * @return {string}
 */
proto.OsmosisMsgLPAdd.prototype.getAmountInMaxB = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.setAmountInMaxB = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPAdd} returns this
 */
proto.OsmosisMsgLPAdd.prototype.clearAmountInMaxB = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPAdd.prototype.hasAmountInMaxB = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgLPRemove.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgLPRemove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgLPRemove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPRemove.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    poolId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    shareInAmount: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    denomOutMinA: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    amountOutMinA: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    denomOutMinB: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    amountOutMinB: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgLPRemove}
 */
proto.OsmosisMsgLPRemove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgLPRemove;
  return proto.OsmosisMsgLPRemove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgLPRemove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgLPRemove}
 */
proto.OsmosisMsgLPRemove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPoolId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShareInAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenomOutMinA(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountOutMinA(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenomOutMinB(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmountOutMinB(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgLPRemove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgLPRemove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgLPRemove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPRemove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 pool_id = 2;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getPoolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setPoolId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearPoolId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasPoolId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string share_in_amount = 3;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getShareInAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setShareInAmount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearShareInAmount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasShareInAmount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string denom_out_min_a = 4;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getDenomOutMinA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setDenomOutMinA = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearDenomOutMinA = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasDenomOutMinA = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string amount_out_min_a = 5;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getAmountOutMinA = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setAmountOutMinA = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearAmountOutMinA = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasAmountOutMinA = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string denom_out_min_b = 6;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getDenomOutMinB = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setDenomOutMinB = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearDenomOutMinB = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasDenomOutMinB = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string amount_out_min_b = 7;
 * @return {string}
 */
proto.OsmosisMsgLPRemove.prototype.getAmountOutMinB = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.setAmountOutMinB = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPRemove} returns this
 */
proto.OsmosisMsgLPRemove.prototype.clearAmountOutMinB = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPRemove.prototype.hasAmountOutMinB = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgLPStake.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgLPStake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgLPStake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPStake.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    duration: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    denom: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgLPStake}
 */
proto.OsmosisMsgLPStake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgLPStake;
  return proto.OsmosisMsgLPStake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgLPStake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgLPStake}
 */
proto.OsmosisMsgLPStake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setDuration(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgLPStake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgLPStake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgLPStake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPStake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string owner = 1;
 * @return {string}
 */
proto.OsmosisMsgLPStake.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.setOwner = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.clearOwner = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPStake.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 duration = 2;
 * @return {string}
 */
proto.OsmosisMsgLPStake.prototype.getDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.setDuration = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.clearDuration = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPStake.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string denom = 4;
 * @return {string}
 */
proto.OsmosisMsgLPStake.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPStake.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string amount = 5;
 * @return {string}
 */
proto.OsmosisMsgLPStake.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPStake} returns this
 */
proto.OsmosisMsgLPStake.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPStake.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgLPUnstake.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgLPUnstake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgLPUnstake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPUnstake.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgLPUnstake}
 */
proto.OsmosisMsgLPUnstake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgLPUnstake;
  return proto.OsmosisMsgLPUnstake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgLPUnstake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgLPUnstake}
 */
proto.OsmosisMsgLPUnstake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgLPUnstake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgLPUnstake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgLPUnstake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgLPUnstake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string owner = 1;
 * @return {string}
 */
proto.OsmosisMsgLPUnstake.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPUnstake} returns this
 */
proto.OsmosisMsgLPUnstake.prototype.setOwner = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPUnstake} returns this
 */
proto.OsmosisMsgLPUnstake.prototype.clearOwner = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPUnstake.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.OsmosisMsgLPUnstake.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgLPUnstake} returns this
 */
proto.OsmosisMsgLPUnstake.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgLPUnstake} returns this
 */
proto.OsmosisMsgLPUnstake.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgLPUnstake.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgRewards.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgRewards.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgRewards} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRewards.toObject = function(includeInstance, msg) {
  var f, obj = {
    delegatorAddress: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    validatorAddress: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgRewards}
 */
proto.OsmosisMsgRewards.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgRewards;
  return proto.OsmosisMsgRewards.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgRewards} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgRewards}
 */
proto.OsmosisMsgRewards.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgRewards.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgRewards.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgRewards} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgRewards.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string delegator_address = 1;
 * @return {string}
 */
proto.OsmosisMsgRewards.prototype.getDelegatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgRewards} returns this
 */
proto.OsmosisMsgRewards.prototype.setDelegatorAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgRewards} returns this
 */
proto.OsmosisMsgRewards.prototype.clearDelegatorAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgRewards.prototype.hasDelegatorAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string validator_address = 2;
 * @return {string}
 */
proto.OsmosisMsgRewards.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgRewards} returns this
 */
proto.OsmosisMsgRewards.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgRewards} returns this
 */
proto.OsmosisMsgRewards.prototype.clearValidatorAddress = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgRewards.prototype.hasValidatorAddress = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgIBCTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgIBCTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgIBCTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgIBCTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcePort: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sourceChannel: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    denom: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    sender: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    revisionNumber: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    revisionHeight: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgIBCTransfer}
 */
proto.OsmosisMsgIBCTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgIBCTransfer;
  return proto.OsmosisMsgIBCTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgIBCTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgIBCTransfer}
 */
proto.OsmosisMsgIBCTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcePort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChannel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRevisionNumber(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRevisionHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgIBCTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgIBCTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgIBCTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgIBCTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string source_port = 1;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getSourcePort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setSourcePort = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearSourcePort = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasSourcePort = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string source_channel = 2;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getSourceChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setSourceChannel = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearSourceChannel = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasSourceChannel = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string denom = 3;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setDenom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearDenom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasDenom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string amount = 4;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string sender = 5;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearSender = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasSender = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string receiver = 6;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string revision_number = 7;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getRevisionNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setRevisionNumber = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearRevisionNumber = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasRevisionNumber = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string revision_height = 8;
 * @return {string}
 */
proto.OsmosisMsgIBCTransfer.prototype.getRevisionHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.setRevisionHeight = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgIBCTransfer} returns this
 */
proto.OsmosisMsgIBCTransfer.prototype.clearRevisionHeight = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgIBCTransfer.prototype.hasRevisionHeight = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisMsgSwap.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisMsgSwap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisMsgSwap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSwap.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    poolId: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    tokenOutDenom: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    tokenInDenom: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    tokenInAmount: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    tokenOutMinAmount: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisMsgSwap}
 */
proto.OsmosisMsgSwap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisMsgSwap;
  return proto.OsmosisMsgSwap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisMsgSwap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisMsgSwap}
 */
proto.OsmosisMsgSwap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPoolId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenOutDenom(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenInDenom(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenInAmount(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenOutMinAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisMsgSwap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisMsgSwap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisMsgSwap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisMsgSwap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 pool_id = 2;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getPoolId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setPoolId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearPoolId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasPoolId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string token_out_denom = 3;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getTokenOutDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setTokenOutDenom = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearTokenOutDenom = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasTokenOutDenom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string token_in_denom = 4;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getTokenInDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setTokenInDenom = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearTokenInDenom = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasTokenInDenom = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string token_in_amount = 5;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getTokenInAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setTokenInAmount = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearTokenInAmount = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasTokenInAmount = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string token_out_min_amount = 6;
 * @return {string}
 */
proto.OsmosisMsgSwap.prototype.getTokenOutMinAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.setTokenOutMinAmount = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisMsgSwap} returns this
 */
proto.OsmosisMsgSwap.prototype.clearTokenOutMinAmount = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisMsgSwap.prototype.hasTokenOutMinAmount = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmosisSignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmosisSignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmosisSignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmosisSignedTx}
 */
proto.OsmosisSignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmosisSignedTx;
  return proto.OsmosisSignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmosisSignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmosisSignedTx}
 */
proto.OsmosisSignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmosisSignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmosisSignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmosisSignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmosisSignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.OsmosisSignedTx.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.OsmosisSignedTx.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.OsmosisSignedTx.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.setPublicKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.clearPublicKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignedTx.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.OsmosisSignedTx.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.OsmosisSignedTx.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.OsmosisSignedTx.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.OsmosisSignedTx} returns this
 */
proto.OsmosisSignedTx.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.OsmosisSignedTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
