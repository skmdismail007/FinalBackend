// source: messages-eos.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.EosActionBuyRam', null, global);
goog.exportSymbol('proto.EosActionBuyRamBytes', null, global);
goog.exportSymbol('proto.EosActionCommon', null, global);
goog.exportSymbol('proto.EosActionDelegate', null, global);
goog.exportSymbol('proto.EosActionDeleteAuth', null, global);
goog.exportSymbol('proto.EosActionLinkAuth', null, global);
goog.exportSymbol('proto.EosActionNewAccount', null, global);
goog.exportSymbol('proto.EosActionRefund', null, global);
goog.exportSymbol('proto.EosActionSellRam', null, global);
goog.exportSymbol('proto.EosActionTransfer', null, global);
goog.exportSymbol('proto.EosActionUndelegate', null, global);
goog.exportSymbol('proto.EosActionUnknown', null, global);
goog.exportSymbol('proto.EosActionUnlinkAuth', null, global);
goog.exportSymbol('proto.EosActionUpdateAuth', null, global);
goog.exportSymbol('proto.EosActionVoteProducer', null, global);
goog.exportSymbol('proto.EosAsset', null, global);
goog.exportSymbol('proto.EosAuthorization', null, global);
goog.exportSymbol('proto.EosAuthorizationAccount', null, global);
goog.exportSymbol('proto.EosAuthorizationKey', null, global);
goog.exportSymbol('proto.EosAuthorizationWait', null, global);
goog.exportSymbol('proto.EosGetPublicKey', null, global);
goog.exportSymbol('proto.EosPermissionLevel', null, global);
goog.exportSymbol('proto.EosPublicKey', null, global);
goog.exportSymbol('proto.EosPublicKeyKind', null, global);
goog.exportSymbol('proto.EosSignTx', null, global);
goog.exportSymbol('proto.EosSignedTx', null, global);
goog.exportSymbol('proto.EosTxActionAck', null, global);
goog.exportSymbol('proto.EosTxActionRequest', null, global);
goog.exportSymbol('proto.EosTxHeader', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosGetPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EosGetPublicKey.repeatedFields_, null);
};
goog.inherits(proto.EosGetPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosGetPublicKey.displayName = 'proto.EosGetPublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosPublicKey.displayName = 'proto.EosPublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EosSignTx.repeatedFields_, null);
};
goog.inherits(proto.EosSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosSignTx.displayName = 'proto.EosSignTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosTxHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosTxHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosTxHeader.displayName = 'proto.EosTxHeader';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosTxActionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosTxActionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosTxActionRequest.displayName = 'proto.EosTxActionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosTxActionAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosTxActionAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosTxActionAck.displayName = 'proto.EosTxActionAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosAsset.displayName = 'proto.EosAsset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosPermissionLevel = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosPermissionLevel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosPermissionLevel.displayName = 'proto.EosPermissionLevel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosAuthorizationKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EosAuthorizationKey.repeatedFields_, null);
};
goog.inherits(proto.EosAuthorizationKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosAuthorizationKey.displayName = 'proto.EosAuthorizationKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosAuthorizationAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosAuthorizationAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosAuthorizationAccount.displayName = 'proto.EosAuthorizationAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosAuthorizationWait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosAuthorizationWait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosAuthorizationWait.displayName = 'proto.EosAuthorizationWait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosAuthorization = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EosAuthorization.repeatedFields_, null);
};
goog.inherits(proto.EosAuthorization, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosAuthorization.displayName = 'proto.EosAuthorization';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionCommon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EosActionCommon.repeatedFields_, null);
};
goog.inherits(proto.EosActionCommon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionCommon.displayName = 'proto.EosActionCommon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionTransfer.displayName = 'proto.EosActionTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionDelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionDelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionDelegate.displayName = 'proto.EosActionDelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionUndelegate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionUndelegate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionUndelegate.displayName = 'proto.EosActionUndelegate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionRefund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionRefund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionRefund.displayName = 'proto.EosActionRefund';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionBuyRam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionBuyRam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionBuyRam.displayName = 'proto.EosActionBuyRam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionBuyRamBytes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionBuyRamBytes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionBuyRamBytes.displayName = 'proto.EosActionBuyRamBytes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionSellRam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionSellRam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionSellRam.displayName = 'proto.EosActionSellRam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionVoteProducer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.EosActionVoteProducer.repeatedFields_, null);
};
goog.inherits(proto.EosActionVoteProducer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionVoteProducer.displayName = 'proto.EosActionVoteProducer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionUpdateAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionUpdateAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionUpdateAuth.displayName = 'proto.EosActionUpdateAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionDeleteAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionDeleteAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionDeleteAuth.displayName = 'proto.EosActionDeleteAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionLinkAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionLinkAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionLinkAuth.displayName = 'proto.EosActionLinkAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionUnlinkAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionUnlinkAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionUnlinkAuth.displayName = 'proto.EosActionUnlinkAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionNewAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionNewAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionNewAccount.displayName = 'proto.EosActionNewAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosActionUnknown = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosActionUnknown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosActionUnknown.displayName = 'proto.EosActionUnknown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EosSignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EosSignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EosSignedTx.displayName = 'proto.EosSignedTx';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EosGetPublicKey.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosGetPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.EosGetPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosGetPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosGetPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    showDisplay: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    kind: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosGetPublicKey}
 */
proto.EosGetPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosGetPublicKey;
  return proto.EosGetPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosGetPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosGetPublicKey}
 */
proto.EosGetPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowDisplay(value);
      break;
    case 3:
      var value = /** @type {!proto.EosPublicKeyKind} */ (reader.readEnum());
      msg.setKind(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosGetPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosGetPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosGetPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosGetPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!proto.EosPublicKeyKind} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.EosGetPublicKey.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.EosGetPublicKey} returns this
 */
proto.EosGetPublicKey.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.EosGetPublicKey} returns this
 */
proto.EosGetPublicKey.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosGetPublicKey} returns this
 */
proto.EosGetPublicKey.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional bool show_display = 2;
 * @return {boolean}
 */
proto.EosGetPublicKey.prototype.getShowDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.EosGetPublicKey} returns this
 */
proto.EosGetPublicKey.prototype.setShowDisplay = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosGetPublicKey} returns this
 */
proto.EosGetPublicKey.prototype.clearShowDisplay = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosGetPublicKey.prototype.hasShowDisplay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosPublicKeyKind kind = 3;
 * @return {!proto.EosPublicKeyKind}
 */
proto.EosGetPublicKey.prototype.getKind = function() {
  return /** @type {!proto.EosPublicKeyKind} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.EosPublicKeyKind} value
 * @return {!proto.EosGetPublicKey} returns this
 */
proto.EosGetPublicKey.prototype.setKind = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosGetPublicKey} returns this
 */
proto.EosGetPublicKey.prototype.clearKind = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosGetPublicKey.prototype.hasKind = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.EosPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    wifPublicKey: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    rawPublicKey: msg.getRawPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosPublicKey}
 */
proto.EosPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosPublicKey;
  return proto.EosPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosPublicKey}
 */
proto.EosPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWifPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string wif_public_key = 1;
 * @return {string}
 */
proto.EosPublicKey.prototype.getWifPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.EosPublicKey} returns this
 */
proto.EosPublicKey.prototype.setWifPublicKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosPublicKey} returns this
 */
proto.EosPublicKey.prototype.clearWifPublicKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosPublicKey.prototype.hasWifPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes raw_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EosPublicKey.prototype.getRawPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes raw_public_key = 2;
 * This is a type-conversion wrapper around `getRawPublicKey()`
 * @return {string}
 */
proto.EosPublicKey.prototype.getRawPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawPublicKey()));
};


/**
 * optional bytes raw_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawPublicKey()`
 * @return {!Uint8Array}
 */
proto.EosPublicKey.prototype.getRawPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.EosPublicKey} returns this
 */
proto.EosPublicKey.prototype.setRawPublicKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosPublicKey} returns this
 */
proto.EosPublicKey.prototype.clearRawPublicKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosPublicKey.prototype.hasRawPublicKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EosSignTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.EosSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    chainId: msg.getChainId_asB64(),
    header: (f = msg.getHeader()) && proto.EosTxHeader.toObject(includeInstance, f),
    numActions: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosSignTx}
 */
proto.EosSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosSignTx;
  return proto.EosSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosSignTx}
 */
proto.EosSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainId(value);
      break;
    case 3:
      var value = new proto.EosTxHeader;
      reader.readMessage(value,proto.EosTxHeader.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EosTxHeader.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.EosSignTx.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional bytes chain_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EosSignTx.prototype.getChainId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes chain_id = 2;
 * This is a type-conversion wrapper around `getChainId()`
 * @return {string}
 */
proto.EosSignTx.prototype.getChainId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainId()));
};


/**
 * optional bytes chain_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainId()`
 * @return {!Uint8Array}
 */
proto.EosSignTx.prototype.getChainId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.setChainId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.clearChainId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosSignTx.prototype.hasChainId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosTxHeader header = 3;
 * @return {?proto.EosTxHeader}
 */
proto.EosSignTx.prototype.getHeader = function() {
  return /** @type{?proto.EosTxHeader} */ (
    jspb.Message.getWrapperField(this, proto.EosTxHeader, 3));
};


/**
 * @param {?proto.EosTxHeader|undefined} value
 * @return {!proto.EosSignTx} returns this
*/
proto.EosSignTx.prototype.setHeader = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.clearHeader = function() {
  return this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosSignTx.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 num_actions = 4;
 * @return {number}
 */
proto.EosSignTx.prototype.getNumActions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.setNumActions = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosSignTx} returns this
 */
proto.EosSignTx.prototype.clearNumActions = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosSignTx.prototype.hasNumActions = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosTxHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.EosTxHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosTxHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosTxHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    expiration: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    refBlockNum: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    refBlockPrefix: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    maxNetUsageWords: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    maxCpuUsageMs: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    delaySec: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosTxHeader}
 */
proto.EosTxHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosTxHeader;
  return proto.EosTxHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosTxHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosTxHeader}
 */
proto.EosTxHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpiration(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRefBlockNum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRefBlockPrefix(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxNetUsageWords(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxCpuUsageMs(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDelaySec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosTxHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosTxHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosTxHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosTxHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * required uint32 expiration = 1;
 * @return {number}
 */
proto.EosTxHeader.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.setExpiration = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.clearExpiration = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxHeader.prototype.hasExpiration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 ref_block_num = 2;
 * @return {number}
 */
proto.EosTxHeader.prototype.getRefBlockNum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.setRefBlockNum = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.clearRefBlockNum = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxHeader.prototype.hasRefBlockNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 ref_block_prefix = 3;
 * @return {number}
 */
proto.EosTxHeader.prototype.getRefBlockPrefix = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.setRefBlockPrefix = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.clearRefBlockPrefix = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxHeader.prototype.hasRefBlockPrefix = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 max_net_usage_words = 4;
 * @return {number}
 */
proto.EosTxHeader.prototype.getMaxNetUsageWords = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.setMaxNetUsageWords = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.clearMaxNetUsageWords = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxHeader.prototype.hasMaxNetUsageWords = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 max_cpu_usage_ms = 5;
 * @return {number}
 */
proto.EosTxHeader.prototype.getMaxCpuUsageMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.setMaxCpuUsageMs = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.clearMaxCpuUsageMs = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxHeader.prototype.hasMaxCpuUsageMs = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required uint32 delay_sec = 6;
 * @return {number}
 */
proto.EosTxHeader.prototype.getDelaySec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.setDelaySec = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosTxHeader} returns this
 */
proto.EosTxHeader.prototype.clearDelaySec = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxHeader.prototype.hasDelaySec = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosTxActionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.EosTxActionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosTxActionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosTxActionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosTxActionRequest}
 */
proto.EosTxActionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosTxActionRequest;
  return proto.EosTxActionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosTxActionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosTxActionRequest}
 */
proto.EosTxActionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosTxActionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosTxActionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosTxActionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosTxActionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosTxActionAck.prototype.toObject = function(opt_includeInstance) {
  return proto.EosTxActionAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosTxActionAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosTxActionAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    common: (f = msg.getCommon()) && proto.EosActionCommon.toObject(includeInstance, f),
    transfer: (f = msg.getTransfer()) && proto.EosActionTransfer.toObject(includeInstance, f),
    delegate: (f = msg.getDelegate()) && proto.EosActionDelegate.toObject(includeInstance, f),
    undelegate: (f = msg.getUndelegate()) && proto.EosActionUndelegate.toObject(includeInstance, f),
    refund: (f = msg.getRefund()) && proto.EosActionRefund.toObject(includeInstance, f),
    buyRam: (f = msg.getBuyRam()) && proto.EosActionBuyRam.toObject(includeInstance, f),
    buyRamBytes: (f = msg.getBuyRamBytes()) && proto.EosActionBuyRamBytes.toObject(includeInstance, f),
    sellRam: (f = msg.getSellRam()) && proto.EosActionSellRam.toObject(includeInstance, f),
    voteProducer: (f = msg.getVoteProducer()) && proto.EosActionVoteProducer.toObject(includeInstance, f),
    updateAuth: (f = msg.getUpdateAuth()) && proto.EosActionUpdateAuth.toObject(includeInstance, f),
    deleteAuth: (f = msg.getDeleteAuth()) && proto.EosActionDeleteAuth.toObject(includeInstance, f),
    linkAuth: (f = msg.getLinkAuth()) && proto.EosActionLinkAuth.toObject(includeInstance, f),
    unlinkAuth: (f = msg.getUnlinkAuth()) && proto.EosActionUnlinkAuth.toObject(includeInstance, f),
    newAccount: (f = msg.getNewAccount()) && proto.EosActionNewAccount.toObject(includeInstance, f),
    unknown: (f = msg.getUnknown()) && proto.EosActionUnknown.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosTxActionAck}
 */
proto.EosTxActionAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosTxActionAck;
  return proto.EosTxActionAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosTxActionAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosTxActionAck}
 */
proto.EosTxActionAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EosActionCommon;
      reader.readMessage(value,proto.EosActionCommon.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    case 2:
      var value = new proto.EosActionTransfer;
      reader.readMessage(value,proto.EosActionTransfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 3:
      var value = new proto.EosActionDelegate;
      reader.readMessage(value,proto.EosActionDelegate.deserializeBinaryFromReader);
      msg.setDelegate(value);
      break;
    case 4:
      var value = new proto.EosActionUndelegate;
      reader.readMessage(value,proto.EosActionUndelegate.deserializeBinaryFromReader);
      msg.setUndelegate(value);
      break;
    case 5:
      var value = new proto.EosActionRefund;
      reader.readMessage(value,proto.EosActionRefund.deserializeBinaryFromReader);
      msg.setRefund(value);
      break;
    case 6:
      var value = new proto.EosActionBuyRam;
      reader.readMessage(value,proto.EosActionBuyRam.deserializeBinaryFromReader);
      msg.setBuyRam(value);
      break;
    case 7:
      var value = new proto.EosActionBuyRamBytes;
      reader.readMessage(value,proto.EosActionBuyRamBytes.deserializeBinaryFromReader);
      msg.setBuyRamBytes(value);
      break;
    case 8:
      var value = new proto.EosActionSellRam;
      reader.readMessage(value,proto.EosActionSellRam.deserializeBinaryFromReader);
      msg.setSellRam(value);
      break;
    case 9:
      var value = new proto.EosActionVoteProducer;
      reader.readMessage(value,proto.EosActionVoteProducer.deserializeBinaryFromReader);
      msg.setVoteProducer(value);
      break;
    case 10:
      var value = new proto.EosActionUpdateAuth;
      reader.readMessage(value,proto.EosActionUpdateAuth.deserializeBinaryFromReader);
      msg.setUpdateAuth(value);
      break;
    case 11:
      var value = new proto.EosActionDeleteAuth;
      reader.readMessage(value,proto.EosActionDeleteAuth.deserializeBinaryFromReader);
      msg.setDeleteAuth(value);
      break;
    case 12:
      var value = new proto.EosActionLinkAuth;
      reader.readMessage(value,proto.EosActionLinkAuth.deserializeBinaryFromReader);
      msg.setLinkAuth(value);
      break;
    case 13:
      var value = new proto.EosActionUnlinkAuth;
      reader.readMessage(value,proto.EosActionUnlinkAuth.deserializeBinaryFromReader);
      msg.setUnlinkAuth(value);
      break;
    case 14:
      var value = new proto.EosActionNewAccount;
      reader.readMessage(value,proto.EosActionNewAccount.deserializeBinaryFromReader);
      msg.setNewAccount(value);
      break;
    case 15:
      var value = new proto.EosActionUnknown;
      reader.readMessage(value,proto.EosActionUnknown.deserializeBinaryFromReader);
      msg.setUnknown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosTxActionAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosTxActionAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosTxActionAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosTxActionAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.EosActionCommon.serializeBinaryToWriter
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.EosActionTransfer.serializeBinaryToWriter
    );
  }
  f = message.getDelegate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EosActionDelegate.serializeBinaryToWriter
    );
  }
  f = message.getUndelegate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EosActionUndelegate.serializeBinaryToWriter
    );
  }
  f = message.getRefund();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.EosActionRefund.serializeBinaryToWriter
    );
  }
  f = message.getBuyRam();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.EosActionBuyRam.serializeBinaryToWriter
    );
  }
  f = message.getBuyRamBytes();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.EosActionBuyRamBytes.serializeBinaryToWriter
    );
  }
  f = message.getSellRam();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.EosActionSellRam.serializeBinaryToWriter
    );
  }
  f = message.getVoteProducer();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.EosActionVoteProducer.serializeBinaryToWriter
    );
  }
  f = message.getUpdateAuth();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.EosActionUpdateAuth.serializeBinaryToWriter
    );
  }
  f = message.getDeleteAuth();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.EosActionDeleteAuth.serializeBinaryToWriter
    );
  }
  f = message.getLinkAuth();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.EosActionLinkAuth.serializeBinaryToWriter
    );
  }
  f = message.getUnlinkAuth();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.EosActionUnlinkAuth.serializeBinaryToWriter
    );
  }
  f = message.getNewAccount();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.EosActionNewAccount.serializeBinaryToWriter
    );
  }
  f = message.getUnknown();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.EosActionUnknown.serializeBinaryToWriter
    );
  }
};


/**
 * optional EosActionCommon common = 1;
 * @return {?proto.EosActionCommon}
 */
proto.EosTxActionAck.prototype.getCommon = function() {
  return /** @type{?proto.EosActionCommon} */ (
    jspb.Message.getWrapperField(this, proto.EosActionCommon, 1));
};


/**
 * @param {?proto.EosActionCommon|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EosActionTransfer transfer = 2;
 * @return {?proto.EosActionTransfer}
 */
proto.EosTxActionAck.prototype.getTransfer = function() {
  return /** @type{?proto.EosActionTransfer} */ (
    jspb.Message.getWrapperField(this, proto.EosActionTransfer, 2));
};


/**
 * @param {?proto.EosActionTransfer|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setTransfer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosActionDelegate delegate = 3;
 * @return {?proto.EosActionDelegate}
 */
proto.EosTxActionAck.prototype.getDelegate = function() {
  return /** @type{?proto.EosActionDelegate} */ (
    jspb.Message.getWrapperField(this, proto.EosActionDelegate, 3));
};


/**
 * @param {?proto.EosActionDelegate|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setDelegate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearDelegate = function() {
  return this.setDelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasDelegate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EosActionUndelegate undelegate = 4;
 * @return {?proto.EosActionUndelegate}
 */
proto.EosTxActionAck.prototype.getUndelegate = function() {
  return /** @type{?proto.EosActionUndelegate} */ (
    jspb.Message.getWrapperField(this, proto.EosActionUndelegate, 4));
};


/**
 * @param {?proto.EosActionUndelegate|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setUndelegate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearUndelegate = function() {
  return this.setUndelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasUndelegate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional EosActionRefund refund = 5;
 * @return {?proto.EosActionRefund}
 */
proto.EosTxActionAck.prototype.getRefund = function() {
  return /** @type{?proto.EosActionRefund} */ (
    jspb.Message.getWrapperField(this, proto.EosActionRefund, 5));
};


/**
 * @param {?proto.EosActionRefund|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setRefund = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearRefund = function() {
  return this.setRefund(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasRefund = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional EosActionBuyRam buy_ram = 6;
 * @return {?proto.EosActionBuyRam}
 */
proto.EosTxActionAck.prototype.getBuyRam = function() {
  return /** @type{?proto.EosActionBuyRam} */ (
    jspb.Message.getWrapperField(this, proto.EosActionBuyRam, 6));
};


/**
 * @param {?proto.EosActionBuyRam|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setBuyRam = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearBuyRam = function() {
  return this.setBuyRam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasBuyRam = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional EosActionBuyRamBytes buy_ram_bytes = 7;
 * @return {?proto.EosActionBuyRamBytes}
 */
proto.EosTxActionAck.prototype.getBuyRamBytes = function() {
  return /** @type{?proto.EosActionBuyRamBytes} */ (
    jspb.Message.getWrapperField(this, proto.EosActionBuyRamBytes, 7));
};


/**
 * @param {?proto.EosActionBuyRamBytes|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setBuyRamBytes = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearBuyRamBytes = function() {
  return this.setBuyRamBytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasBuyRamBytes = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional EosActionSellRam sell_ram = 8;
 * @return {?proto.EosActionSellRam}
 */
proto.EosTxActionAck.prototype.getSellRam = function() {
  return /** @type{?proto.EosActionSellRam} */ (
    jspb.Message.getWrapperField(this, proto.EosActionSellRam, 8));
};


/**
 * @param {?proto.EosActionSellRam|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setSellRam = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearSellRam = function() {
  return this.setSellRam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasSellRam = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional EosActionVoteProducer vote_producer = 9;
 * @return {?proto.EosActionVoteProducer}
 */
proto.EosTxActionAck.prototype.getVoteProducer = function() {
  return /** @type{?proto.EosActionVoteProducer} */ (
    jspb.Message.getWrapperField(this, proto.EosActionVoteProducer, 9));
};


/**
 * @param {?proto.EosActionVoteProducer|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setVoteProducer = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearVoteProducer = function() {
  return this.setVoteProducer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasVoteProducer = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional EosActionUpdateAuth update_auth = 10;
 * @return {?proto.EosActionUpdateAuth}
 */
proto.EosTxActionAck.prototype.getUpdateAuth = function() {
  return /** @type{?proto.EosActionUpdateAuth} */ (
    jspb.Message.getWrapperField(this, proto.EosActionUpdateAuth, 10));
};


/**
 * @param {?proto.EosActionUpdateAuth|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setUpdateAuth = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearUpdateAuth = function() {
  return this.setUpdateAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasUpdateAuth = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional EosActionDeleteAuth delete_auth = 11;
 * @return {?proto.EosActionDeleteAuth}
 */
proto.EosTxActionAck.prototype.getDeleteAuth = function() {
  return /** @type{?proto.EosActionDeleteAuth} */ (
    jspb.Message.getWrapperField(this, proto.EosActionDeleteAuth, 11));
};


/**
 * @param {?proto.EosActionDeleteAuth|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setDeleteAuth = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearDeleteAuth = function() {
  return this.setDeleteAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasDeleteAuth = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional EosActionLinkAuth link_auth = 12;
 * @return {?proto.EosActionLinkAuth}
 */
proto.EosTxActionAck.prototype.getLinkAuth = function() {
  return /** @type{?proto.EosActionLinkAuth} */ (
    jspb.Message.getWrapperField(this, proto.EosActionLinkAuth, 12));
};


/**
 * @param {?proto.EosActionLinkAuth|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setLinkAuth = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearLinkAuth = function() {
  return this.setLinkAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasLinkAuth = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional EosActionUnlinkAuth unlink_auth = 13;
 * @return {?proto.EosActionUnlinkAuth}
 */
proto.EosTxActionAck.prototype.getUnlinkAuth = function() {
  return /** @type{?proto.EosActionUnlinkAuth} */ (
    jspb.Message.getWrapperField(this, proto.EosActionUnlinkAuth, 13));
};


/**
 * @param {?proto.EosActionUnlinkAuth|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setUnlinkAuth = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearUnlinkAuth = function() {
  return this.setUnlinkAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasUnlinkAuth = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional EosActionNewAccount new_account = 14;
 * @return {?proto.EosActionNewAccount}
 */
proto.EosTxActionAck.prototype.getNewAccount = function() {
  return /** @type{?proto.EosActionNewAccount} */ (
    jspb.Message.getWrapperField(this, proto.EosActionNewAccount, 14));
};


/**
 * @param {?proto.EosActionNewAccount|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setNewAccount = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearNewAccount = function() {
  return this.setNewAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasNewAccount = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional EosActionUnknown unknown = 15;
 * @return {?proto.EosActionUnknown}
 */
proto.EosTxActionAck.prototype.getUnknown = function() {
  return /** @type{?proto.EosActionUnknown} */ (
    jspb.Message.getWrapperField(this, proto.EosActionUnknown, 15));
};


/**
 * @param {?proto.EosActionUnknown|undefined} value
 * @return {!proto.EosTxActionAck} returns this
*/
proto.EosTxActionAck.prototype.setUnknown = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosTxActionAck} returns this
 */
proto.EosTxActionAck.prototype.clearUnknown = function() {
  return this.setUnknown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosTxActionAck.prototype.hasUnknown = function() {
  return jspb.Message.getField(this, 15) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.EosAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    symbol: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosAsset}
 */
proto.EosAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosAsset;
  return proto.EosAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosAsset}
 */
proto.EosAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeSint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional sint64 amount = 1;
 * @return {string}
 */
proto.EosAsset.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosAsset} returns this
 */
proto.EosAsset.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAsset} returns this
 */
proto.EosAsset.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAsset.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 symbol = 2;
 * @return {string}
 */
proto.EosAsset.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosAsset} returns this
 */
proto.EosAsset.prototype.setSymbol = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAsset} returns this
 */
proto.EosAsset.prototype.clearSymbol = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAsset.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosPermissionLevel.prototype.toObject = function(opt_includeInstance) {
  return proto.EosPermissionLevel.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosPermissionLevel} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosPermissionLevel.toObject = function(includeInstance, msg) {
  var f, obj = {
    actor: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    permission: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosPermissionLevel}
 */
proto.EosPermissionLevel.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosPermissionLevel;
  return proto.EosPermissionLevel.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosPermissionLevel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosPermissionLevel}
 */
proto.EosPermissionLevel.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setActor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosPermissionLevel.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosPermissionLevel.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosPermissionLevel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosPermissionLevel.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 actor = 1;
 * @return {string}
 */
proto.EosPermissionLevel.prototype.getActor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosPermissionLevel} returns this
 */
proto.EosPermissionLevel.prototype.setActor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosPermissionLevel} returns this
 */
proto.EosPermissionLevel.prototype.clearActor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosPermissionLevel.prototype.hasActor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 permission = 2;
 * @return {string}
 */
proto.EosPermissionLevel.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosPermissionLevel} returns this
 */
proto.EosPermissionLevel.prototype.setPermission = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosPermissionLevel} returns this
 */
proto.EosPermissionLevel.prototype.clearPermission = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosPermissionLevel.prototype.hasPermission = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EosAuthorizationKey.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosAuthorizationKey.prototype.toObject = function(opt_includeInstance) {
  return proto.EosAuthorizationKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosAuthorizationKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorizationKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    key: msg.getKey_asB64(),
    weight: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    addressNList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosAuthorizationKey}
 */
proto.EosAuthorizationKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosAuthorizationKey;
  return proto.EosAuthorizationKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosAuthorizationKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosAuthorizationKey}
 */
proto.EosAuthorizationKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosAuthorizationKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosAuthorizationKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosAuthorizationKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorizationKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.EosAuthorizationKey.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorizationKey.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EosAuthorizationKey.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes key = 2;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.EosAuthorizationKey.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.EosAuthorizationKey.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorizationKey.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 weight = 3;
 * @return {number}
 */
proto.EosAuthorizationKey.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.setWeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.clearWeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorizationKey.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 address_n = 4;
 * @return {!Array<number>}
 */
proto.EosAuthorizationKey.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosAuthorizationKey} returns this
 */
proto.EosAuthorizationKey.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosAuthorizationAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.EosAuthorizationAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosAuthorizationAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorizationAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = msg.getAccount()) && proto.EosPermissionLevel.toObject(includeInstance, f),
    weight: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosAuthorizationAccount}
 */
proto.EosAuthorizationAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosAuthorizationAccount;
  return proto.EosAuthorizationAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosAuthorizationAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosAuthorizationAccount}
 */
proto.EosAuthorizationAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.EosPermissionLevel;
      reader.readMessage(value,proto.EosPermissionLevel.deserializeBinaryFromReader);
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosAuthorizationAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosAuthorizationAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosAuthorizationAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorizationAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccount();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.EosPermissionLevel.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional EosPermissionLevel account = 1;
 * @return {?proto.EosPermissionLevel}
 */
proto.EosAuthorizationAccount.prototype.getAccount = function() {
  return /** @type{?proto.EosPermissionLevel} */ (
    jspb.Message.getWrapperField(this, proto.EosPermissionLevel, 1));
};


/**
 * @param {?proto.EosPermissionLevel|undefined} value
 * @return {!proto.EosAuthorizationAccount} returns this
*/
proto.EosAuthorizationAccount.prototype.setAccount = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosAuthorizationAccount} returns this
 */
proto.EosAuthorizationAccount.prototype.clearAccount = function() {
  return this.setAccount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorizationAccount.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 weight = 2;
 * @return {number}
 */
proto.EosAuthorizationAccount.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosAuthorizationAccount} returns this
 */
proto.EosAuthorizationAccount.prototype.setWeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAuthorizationAccount} returns this
 */
proto.EosAuthorizationAccount.prototype.clearWeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorizationAccount.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosAuthorizationWait.prototype.toObject = function(opt_includeInstance) {
  return proto.EosAuthorizationWait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosAuthorizationWait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorizationWait.toObject = function(includeInstance, msg) {
  var f, obj = {
    waitSec: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    weight: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosAuthorizationWait}
 */
proto.EosAuthorizationWait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosAuthorizationWait;
  return proto.EosAuthorizationWait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosAuthorizationWait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosAuthorizationWait}
 */
proto.EosAuthorizationWait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWaitSec(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosAuthorizationWait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosAuthorizationWait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosAuthorizationWait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorizationWait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 wait_sec = 1;
 * @return {number}
 */
proto.EosAuthorizationWait.prototype.getWaitSec = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosAuthorizationWait} returns this
 */
proto.EosAuthorizationWait.prototype.setWaitSec = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAuthorizationWait} returns this
 */
proto.EosAuthorizationWait.prototype.clearWaitSec = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorizationWait.prototype.hasWaitSec = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 weight = 2;
 * @return {number}
 */
proto.EosAuthorizationWait.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosAuthorizationWait} returns this
 */
proto.EosAuthorizationWait.prototype.setWeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAuthorizationWait} returns this
 */
proto.EosAuthorizationWait.prototype.clearWeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorizationWait.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EosAuthorization.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosAuthorization.prototype.toObject = function(opt_includeInstance) {
  return proto.EosAuthorization.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosAuthorization} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorization.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.EosAuthorizationKey.toObject, includeInstance),
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.EosAuthorizationAccount.toObject, includeInstance),
    waitsList: jspb.Message.toObjectList(msg.getWaitsList(),
    proto.EosAuthorizationWait.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosAuthorization}
 */
proto.EosAuthorization.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosAuthorization;
  return proto.EosAuthorization.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosAuthorization} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosAuthorization}
 */
proto.EosAuthorization.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreshold(value);
      break;
    case 2:
      var value = new proto.EosAuthorizationKey;
      reader.readMessage(value,proto.EosAuthorizationKey.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 3:
      var value = new proto.EosAuthorizationAccount;
      reader.readMessage(value,proto.EosAuthorizationAccount.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    case 4:
      var value = new proto.EosAuthorizationWait;
      reader.readMessage(value,proto.EosAuthorizationWait.deserializeBinaryFromReader);
      msg.addWaits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosAuthorization.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosAuthorization.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosAuthorization} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosAuthorization.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.EosAuthorizationKey.serializeBinaryToWriter
    );
  }
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.EosAuthorizationAccount.serializeBinaryToWriter
    );
  }
  f = message.getWaitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.EosAuthorizationWait.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 threshold = 1;
 * @return {number}
 */
proto.EosAuthorization.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosAuthorization} returns this
 */
proto.EosAuthorization.prototype.setThreshold = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosAuthorization} returns this
 */
proto.EosAuthorization.prototype.clearThreshold = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosAuthorization.prototype.hasThreshold = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated EosAuthorizationKey keys = 2;
 * @return {!Array<!proto.EosAuthorizationKey>}
 */
proto.EosAuthorization.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.EosAuthorizationKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EosAuthorizationKey, 2));
};


/**
 * @param {!Array<!proto.EosAuthorizationKey>} value
 * @return {!proto.EosAuthorization} returns this
*/
proto.EosAuthorization.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.EosAuthorizationKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EosAuthorizationKey}
 */
proto.EosAuthorization.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.EosAuthorizationKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosAuthorization} returns this
 */
proto.EosAuthorization.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated EosAuthorizationAccount accounts = 3;
 * @return {!Array<!proto.EosAuthorizationAccount>}
 */
proto.EosAuthorization.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.EosAuthorizationAccount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EosAuthorizationAccount, 3));
};


/**
 * @param {!Array<!proto.EosAuthorizationAccount>} value
 * @return {!proto.EosAuthorization} returns this
*/
proto.EosAuthorization.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.EosAuthorizationAccount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EosAuthorizationAccount}
 */
proto.EosAuthorization.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EosAuthorizationAccount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosAuthorization} returns this
 */
proto.EosAuthorization.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};


/**
 * repeated EosAuthorizationWait waits = 4;
 * @return {!Array<!proto.EosAuthorizationWait>}
 */
proto.EosAuthorization.prototype.getWaitsList = function() {
  return /** @type{!Array<!proto.EosAuthorizationWait>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EosAuthorizationWait, 4));
};


/**
 * @param {!Array<!proto.EosAuthorizationWait>} value
 * @return {!proto.EosAuthorization} returns this
*/
proto.EosAuthorization.prototype.setWaitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.EosAuthorizationWait=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EosAuthorizationWait}
 */
proto.EosAuthorization.prototype.addWaits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.EosAuthorizationWait, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosAuthorization} returns this
 */
proto.EosAuthorization.prototype.clearWaitsList = function() {
  return this.setWaitsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EosActionCommon.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionCommon.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionCommon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionCommon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionCommon.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    authorizationList: jspb.Message.toObjectList(msg.getAuthorizationList(),
    proto.EosPermissionLevel.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionCommon}
 */
proto.EosActionCommon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionCommon;
  return proto.EosActionCommon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionCommon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionCommon}
 */
proto.EosActionCommon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.EosPermissionLevel;
      reader.readMessage(value,proto.EosPermissionLevel.deserializeBinaryFromReader);
      msg.addAuthorization(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionCommon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionCommon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionCommon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionCommon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getAuthorizationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.EosPermissionLevel.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 account = 1;
 * @return {string}
 */
proto.EosActionCommon.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionCommon} returns this
 */
proto.EosActionCommon.prototype.setAccount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionCommon} returns this
 */
proto.EosActionCommon.prototype.clearAccount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionCommon.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 name = 2;
 * @return {string}
 */
proto.EosActionCommon.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionCommon} returns this
 */
proto.EosActionCommon.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionCommon} returns this
 */
proto.EosActionCommon.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionCommon.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated EosPermissionLevel authorization = 3;
 * @return {!Array<!proto.EosPermissionLevel>}
 */
proto.EosActionCommon.prototype.getAuthorizationList = function() {
  return /** @type{!Array<!proto.EosPermissionLevel>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.EosPermissionLevel, 3));
};


/**
 * @param {!Array<!proto.EosPermissionLevel>} value
 * @return {!proto.EosActionCommon} returns this
*/
proto.EosActionCommon.prototype.setAuthorizationList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.EosPermissionLevel=} opt_value
 * @param {number=} opt_index
 * @return {!proto.EosPermissionLevel}
 */
proto.EosActionCommon.prototype.addAuthorization = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.EosPermissionLevel, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosActionCommon} returns this
 */
proto.EosActionCommon.prototype.clearAuthorizationList = function() {
  return this.setAuthorizationList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    quantity: (f = msg.getQuantity()) && proto.EosAsset.toObject(includeInstance, f),
    memo: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionTransfer}
 */
proto.EosActionTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionTransfer;
  return proto.EosActionTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionTransfer}
 */
proto.EosActionTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReceiver(value);
      break;
    case 3:
      var value = new proto.EosAsset;
      reader.readMessage(value,proto.EosAsset.deserializeBinaryFromReader);
      msg.setQuantity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EosAsset.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 sender = 1;
 * @return {string}
 */
proto.EosActionTransfer.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionTransfer} returns this
 */
proto.EosActionTransfer.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionTransfer} returns this
 */
proto.EosActionTransfer.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionTransfer.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 receiver = 2;
 * @return {string}
 */
proto.EosActionTransfer.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionTransfer} returns this
 */
proto.EosActionTransfer.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionTransfer} returns this
 */
proto.EosActionTransfer.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionTransfer.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosAsset quantity = 3;
 * @return {?proto.EosAsset}
 */
proto.EosActionTransfer.prototype.getQuantity = function() {
  return /** @type{?proto.EosAsset} */ (
    jspb.Message.getWrapperField(this, proto.EosAsset, 3));
};


/**
 * @param {?proto.EosAsset|undefined} value
 * @return {!proto.EosActionTransfer} returns this
*/
proto.EosActionTransfer.prototype.setQuantity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionTransfer} returns this
 */
proto.EosActionTransfer.prototype.clearQuantity = function() {
  return this.setQuantity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionTransfer.prototype.hasQuantity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.EosActionTransfer.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.EosActionTransfer} returns this
 */
proto.EosActionTransfer.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionTransfer} returns this
 */
proto.EosActionTransfer.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionTransfer.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionDelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionDelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionDelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionDelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    netQuantity: (f = msg.getNetQuantity()) && proto.EosAsset.toObject(includeInstance, f),
    cpuQuantity: (f = msg.getCpuQuantity()) && proto.EosAsset.toObject(includeInstance, f),
    transfer: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionDelegate}
 */
proto.EosActionDelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionDelegate;
  return proto.EosActionDelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionDelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionDelegate}
 */
proto.EosActionDelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReceiver(value);
      break;
    case 3:
      var value = new proto.EosAsset;
      reader.readMessage(value,proto.EosAsset.deserializeBinaryFromReader);
      msg.setNetQuantity(value);
      break;
    case 4:
      var value = new proto.EosAsset;
      reader.readMessage(value,proto.EosAsset.deserializeBinaryFromReader);
      msg.setCpuQuantity(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTransfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionDelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionDelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionDelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionDelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getNetQuantity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EosAsset.serializeBinaryToWriter
    );
  }
  f = message.getCpuQuantity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EosAsset.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional uint64 sender = 1;
 * @return {string}
 */
proto.EosActionDelegate.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionDelegate.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 receiver = 2;
 * @return {string}
 */
proto.EosActionDelegate.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionDelegate.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosAsset net_quantity = 3;
 * @return {?proto.EosAsset}
 */
proto.EosActionDelegate.prototype.getNetQuantity = function() {
  return /** @type{?proto.EosAsset} */ (
    jspb.Message.getWrapperField(this, proto.EosAsset, 3));
};


/**
 * @param {?proto.EosAsset|undefined} value
 * @return {!proto.EosActionDelegate} returns this
*/
proto.EosActionDelegate.prototype.setNetQuantity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.clearNetQuantity = function() {
  return this.setNetQuantity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionDelegate.prototype.hasNetQuantity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EosAsset cpu_quantity = 4;
 * @return {?proto.EosAsset}
 */
proto.EosActionDelegate.prototype.getCpuQuantity = function() {
  return /** @type{?proto.EosAsset} */ (
    jspb.Message.getWrapperField(this, proto.EosAsset, 4));
};


/**
 * @param {?proto.EosAsset|undefined} value
 * @return {!proto.EosActionDelegate} returns this
*/
proto.EosActionDelegate.prototype.setCpuQuantity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.clearCpuQuantity = function() {
  return this.setCpuQuantity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionDelegate.prototype.hasCpuQuantity = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool transfer = 5;
 * @return {boolean}
 */
proto.EosActionDelegate.prototype.getTransfer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.setTransfer = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionDelegate} returns this
 */
proto.EosActionDelegate.prototype.clearTransfer = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionDelegate.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionUndelegate.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionUndelegate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionUndelegate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUndelegate.toObject = function(includeInstance, msg) {
  var f, obj = {
    sender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    netQuantity: (f = msg.getNetQuantity()) && proto.EosAsset.toObject(includeInstance, f),
    cpuQuantity: (f = msg.getCpuQuantity()) && proto.EosAsset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionUndelegate}
 */
proto.EosActionUndelegate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionUndelegate;
  return proto.EosActionUndelegate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionUndelegate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionUndelegate}
 */
proto.EosActionUndelegate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReceiver(value);
      break;
    case 3:
      var value = new proto.EosAsset;
      reader.readMessage(value,proto.EosAsset.deserializeBinaryFromReader);
      msg.setNetQuantity(value);
      break;
    case 4:
      var value = new proto.EosAsset;
      reader.readMessage(value,proto.EosAsset.deserializeBinaryFromReader);
      msg.setCpuQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionUndelegate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionUndelegate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionUndelegate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUndelegate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getNetQuantity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EosAsset.serializeBinaryToWriter
    );
  }
  f = message.getCpuQuantity();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EosAsset.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 sender = 1;
 * @return {string}
 */
proto.EosActionUndelegate.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUndelegate} returns this
 */
proto.EosActionUndelegate.prototype.setSender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUndelegate} returns this
 */
proto.EosActionUndelegate.prototype.clearSender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUndelegate.prototype.hasSender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 receiver = 2;
 * @return {string}
 */
proto.EosActionUndelegate.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUndelegate} returns this
 */
proto.EosActionUndelegate.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUndelegate} returns this
 */
proto.EosActionUndelegate.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUndelegate.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosAsset net_quantity = 3;
 * @return {?proto.EosAsset}
 */
proto.EosActionUndelegate.prototype.getNetQuantity = function() {
  return /** @type{?proto.EosAsset} */ (
    jspb.Message.getWrapperField(this, proto.EosAsset, 3));
};


/**
 * @param {?proto.EosAsset|undefined} value
 * @return {!proto.EosActionUndelegate} returns this
*/
proto.EosActionUndelegate.prototype.setNetQuantity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionUndelegate} returns this
 */
proto.EosActionUndelegate.prototype.clearNetQuantity = function() {
  return this.setNetQuantity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUndelegate.prototype.hasNetQuantity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EosAsset cpu_quantity = 4;
 * @return {?proto.EosAsset}
 */
proto.EosActionUndelegate.prototype.getCpuQuantity = function() {
  return /** @type{?proto.EosAsset} */ (
    jspb.Message.getWrapperField(this, proto.EosAsset, 4));
};


/**
 * @param {?proto.EosAsset|undefined} value
 * @return {!proto.EosActionUndelegate} returns this
*/
proto.EosActionUndelegate.prototype.setCpuQuantity = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionUndelegate} returns this
 */
proto.EosActionUndelegate.prototype.clearCpuQuantity = function() {
  return this.setCpuQuantity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUndelegate.prototype.hasCpuQuantity = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionRefund.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionRefund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionRefund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionRefund.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionRefund}
 */
proto.EosActionRefund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionRefund;
  return proto.EosActionRefund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionRefund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionRefund}
 */
proto.EosActionRefund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setOwner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionRefund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionRefund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionRefund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionRefund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
};


/**
 * optional uint64 owner = 1;
 * @return {string}
 */
proto.EosActionRefund.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionRefund} returns this
 */
proto.EosActionRefund.prototype.setOwner = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionRefund} returns this
 */
proto.EosActionRefund.prototype.clearOwner = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionRefund.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionBuyRam.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionBuyRam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionBuyRam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionBuyRam.toObject = function(includeInstance, msg) {
  var f, obj = {
    payer: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    quantity: (f = msg.getQuantity()) && proto.EosAsset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionBuyRam}
 */
proto.EosActionBuyRam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionBuyRam;
  return proto.EosActionBuyRam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionBuyRam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionBuyRam}
 */
proto.EosActionBuyRam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPayer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReceiver(value);
      break;
    case 3:
      var value = new proto.EosAsset;
      reader.readMessage(value,proto.EosAsset.deserializeBinaryFromReader);
      msg.setQuantity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionBuyRam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionBuyRam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionBuyRam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionBuyRam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getQuantity();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EosAsset.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 payer = 1;
 * @return {string}
 */
proto.EosActionBuyRam.prototype.getPayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionBuyRam} returns this
 */
proto.EosActionBuyRam.prototype.setPayer = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionBuyRam} returns this
 */
proto.EosActionBuyRam.prototype.clearPayer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionBuyRam.prototype.hasPayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 receiver = 2;
 * @return {string}
 */
proto.EosActionBuyRam.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionBuyRam} returns this
 */
proto.EosActionBuyRam.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionBuyRam} returns this
 */
proto.EosActionBuyRam.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionBuyRam.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosAsset quantity = 3;
 * @return {?proto.EosAsset}
 */
proto.EosActionBuyRam.prototype.getQuantity = function() {
  return /** @type{?proto.EosAsset} */ (
    jspb.Message.getWrapperField(this, proto.EosAsset, 3));
};


/**
 * @param {?proto.EosAsset|undefined} value
 * @return {!proto.EosActionBuyRam} returns this
*/
proto.EosActionBuyRam.prototype.setQuantity = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionBuyRam} returns this
 */
proto.EosActionBuyRam.prototype.clearQuantity = function() {
  return this.setQuantity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionBuyRam.prototype.hasQuantity = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionBuyRamBytes.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionBuyRamBytes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionBuyRamBytes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionBuyRamBytes.toObject = function(includeInstance, msg) {
  var f, obj = {
    payer: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    receiver: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    bytes: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionBuyRamBytes}
 */
proto.EosActionBuyRamBytes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionBuyRamBytes;
  return proto.EosActionBuyRamBytes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionBuyRamBytes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionBuyRamBytes}
 */
proto.EosActionBuyRamBytes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPayer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setReceiver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionBuyRamBytes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionBuyRamBytes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionBuyRamBytes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionBuyRamBytes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint64 payer = 1;
 * @return {string}
 */
proto.EosActionBuyRamBytes.prototype.getPayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionBuyRamBytes} returns this
 */
proto.EosActionBuyRamBytes.prototype.setPayer = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionBuyRamBytes} returns this
 */
proto.EosActionBuyRamBytes.prototype.clearPayer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionBuyRamBytes.prototype.hasPayer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 receiver = 2;
 * @return {string}
 */
proto.EosActionBuyRamBytes.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionBuyRamBytes} returns this
 */
proto.EosActionBuyRamBytes.prototype.setReceiver = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionBuyRamBytes} returns this
 */
proto.EosActionBuyRamBytes.prototype.clearReceiver = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionBuyRamBytes.prototype.hasReceiver = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 bytes = 3;
 * @return {number}
 */
proto.EosActionBuyRamBytes.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosActionBuyRamBytes} returns this
 */
proto.EosActionBuyRamBytes.prototype.setBytes = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionBuyRamBytes} returns this
 */
proto.EosActionBuyRamBytes.prototype.clearBytes = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionBuyRamBytes.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionSellRam.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionSellRam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionSellRam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionSellRam.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    bytes: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionSellRam}
 */
proto.EosActionSellRam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionSellRam;
  return proto.EosActionSellRam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionSellRam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionSellRam}
 */
proto.EosActionSellRam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionSellRam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionSellRam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionSellRam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionSellRam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeSint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 account = 1;
 * @return {string}
 */
proto.EosActionSellRam.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionSellRam} returns this
 */
proto.EosActionSellRam.prototype.setAccount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionSellRam} returns this
 */
proto.EosActionSellRam.prototype.clearAccount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionSellRam.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 bytes = 2;
 * @return {string}
 */
proto.EosActionSellRam.prototype.getBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionSellRam} returns this
 */
proto.EosActionSellRam.prototype.setBytes = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionSellRam} returns this
 */
proto.EosActionSellRam.prototype.clearBytes = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionSellRam.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.EosActionVoteProducer.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionVoteProducer.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionVoteProducer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionVoteProducer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionVoteProducer.toObject = function(includeInstance, msg) {
  var f, obj = {
    voter: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    proxy: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    producersList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionVoteProducer}
 */
proto.EosActionVoteProducer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionVoteProducer;
  return proto.EosActionVoteProducer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionVoteProducer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionVoteProducer}
 */
proto.EosActionVoteProducer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setVoter(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setProxy(value);
      break;
    case 3:
      var values = /** @type {!Array<string>} */ (reader.isDelimited() ? reader.readPackedUint64String() : [reader.readUint64String()]);
      for (var i = 0; i < values.length; i++) {
        msg.addProducers(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionVoteProducer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionVoteProducer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionVoteProducer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionVoteProducer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getProducersList();
  if (f.length > 0) {
    writer.writeRepeatedUint64String(
      3,
      f
    );
  }
};


/**
 * optional uint64 voter = 1;
 * @return {string}
 */
proto.EosActionVoteProducer.prototype.getVoter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionVoteProducer} returns this
 */
proto.EosActionVoteProducer.prototype.setVoter = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionVoteProducer} returns this
 */
proto.EosActionVoteProducer.prototype.clearVoter = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionVoteProducer.prototype.hasVoter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 proxy = 2;
 * @return {string}
 */
proto.EosActionVoteProducer.prototype.getProxy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionVoteProducer} returns this
 */
proto.EosActionVoteProducer.prototype.setProxy = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionVoteProducer} returns this
 */
proto.EosActionVoteProducer.prototype.clearProxy = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionVoteProducer.prototype.hasProxy = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated uint64 producers = 3;
 * @return {!Array<string>}
 */
proto.EosActionVoteProducer.prototype.getProducersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.EosActionVoteProducer} returns this
 */
proto.EosActionVoteProducer.prototype.setProducersList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.EosActionVoteProducer} returns this
 */
proto.EosActionVoteProducer.prototype.addProducers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.EosActionVoteProducer} returns this
 */
proto.EosActionVoteProducer.prototype.clearProducersList = function() {
  return this.setProducersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionUpdateAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionUpdateAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionUpdateAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUpdateAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    permission: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    parent: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    auth: (f = msg.getAuth()) && proto.EosAuthorization.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionUpdateAuth}
 */
proto.EosActionUpdateAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionUpdateAuth;
  return proto.EosActionUpdateAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionUpdateAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionUpdateAuth}
 */
proto.EosActionUpdateAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPermission(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setParent(value);
      break;
    case 4:
      var value = new proto.EosAuthorization;
      reader.readMessage(value,proto.EosAuthorization.deserializeBinaryFromReader);
      msg.setAuth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionUpdateAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionUpdateAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionUpdateAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUpdateAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getAuth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EosAuthorization.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 account = 1;
 * @return {string}
 */
proto.EosActionUpdateAuth.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUpdateAuth} returns this
 */
proto.EosActionUpdateAuth.prototype.setAccount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUpdateAuth} returns this
 */
proto.EosActionUpdateAuth.prototype.clearAccount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUpdateAuth.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 permission = 2;
 * @return {string}
 */
proto.EosActionUpdateAuth.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUpdateAuth} returns this
 */
proto.EosActionUpdateAuth.prototype.setPermission = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUpdateAuth} returns this
 */
proto.EosActionUpdateAuth.prototype.clearPermission = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUpdateAuth.prototype.hasPermission = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 parent = 3;
 * @return {string}
 */
proto.EosActionUpdateAuth.prototype.getParent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUpdateAuth} returns this
 */
proto.EosActionUpdateAuth.prototype.setParent = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUpdateAuth} returns this
 */
proto.EosActionUpdateAuth.prototype.clearParent = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUpdateAuth.prototype.hasParent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EosAuthorization auth = 4;
 * @return {?proto.EosAuthorization}
 */
proto.EosActionUpdateAuth.prototype.getAuth = function() {
  return /** @type{?proto.EosAuthorization} */ (
    jspb.Message.getWrapperField(this, proto.EosAuthorization, 4));
};


/**
 * @param {?proto.EosAuthorization|undefined} value
 * @return {!proto.EosActionUpdateAuth} returns this
*/
proto.EosActionUpdateAuth.prototype.setAuth = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionUpdateAuth} returns this
 */
proto.EosActionUpdateAuth.prototype.clearAuth = function() {
  return this.setAuth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUpdateAuth.prototype.hasAuth = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionDeleteAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionDeleteAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionDeleteAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionDeleteAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    permission: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionDeleteAuth}
 */
proto.EosActionDeleteAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionDeleteAuth;
  return proto.EosActionDeleteAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionDeleteAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionDeleteAuth}
 */
proto.EosActionDeleteAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setPermission(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionDeleteAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionDeleteAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionDeleteAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionDeleteAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
};


/**
 * optional uint64 account = 1;
 * @return {string}
 */
proto.EosActionDeleteAuth.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionDeleteAuth} returns this
 */
proto.EosActionDeleteAuth.prototype.setAccount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionDeleteAuth} returns this
 */
proto.EosActionDeleteAuth.prototype.clearAccount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionDeleteAuth.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 permission = 2;
 * @return {string}
 */
proto.EosActionDeleteAuth.prototype.getPermission = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionDeleteAuth} returns this
 */
proto.EosActionDeleteAuth.prototype.setPermission = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionDeleteAuth} returns this
 */
proto.EosActionDeleteAuth.prototype.clearPermission = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionDeleteAuth.prototype.hasPermission = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionLinkAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionLinkAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionLinkAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionLinkAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    code: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    requirement: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionLinkAuth}
 */
proto.EosActionLinkAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionLinkAuth;
  return proto.EosActionLinkAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionLinkAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionLinkAuth}
 */
proto.EosActionLinkAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setRequirement(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionLinkAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionLinkAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionLinkAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionLinkAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64String(
      4,
      f
    );
  }
};


/**
 * optional uint64 account = 1;
 * @return {string}
 */
proto.EosActionLinkAuth.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.setAccount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.clearAccount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionLinkAuth.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 code = 2;
 * @return {string}
 */
proto.EosActionLinkAuth.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.clearCode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionLinkAuth.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 type = 3;
 * @return {string}
 */
proto.EosActionLinkAuth.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.setType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.clearType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionLinkAuth.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 requirement = 4;
 * @return {string}
 */
proto.EosActionLinkAuth.prototype.getRequirement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.setRequirement = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionLinkAuth} returns this
 */
proto.EosActionLinkAuth.prototype.clearRequirement = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionLinkAuth.prototype.hasRequirement = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionUnlinkAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionUnlinkAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionUnlinkAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUnlinkAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    account: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    code: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionUnlinkAuth}
 */
proto.EosActionUnlinkAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionUnlinkAuth;
  return proto.EosActionUnlinkAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionUnlinkAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionUnlinkAuth}
 */
proto.EosActionUnlinkAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionUnlinkAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionUnlinkAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionUnlinkAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUnlinkAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64String(
      3,
      f
    );
  }
};


/**
 * optional uint64 account = 1;
 * @return {string}
 */
proto.EosActionUnlinkAuth.prototype.getAccount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUnlinkAuth} returns this
 */
proto.EosActionUnlinkAuth.prototype.setAccount = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUnlinkAuth} returns this
 */
proto.EosActionUnlinkAuth.prototype.clearAccount = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUnlinkAuth.prototype.hasAccount = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 code = 2;
 * @return {string}
 */
proto.EosActionUnlinkAuth.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUnlinkAuth} returns this
 */
proto.EosActionUnlinkAuth.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUnlinkAuth} returns this
 */
proto.EosActionUnlinkAuth.prototype.clearCode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUnlinkAuth.prototype.hasCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 type = 3;
 * @return {string}
 */
proto.EosActionUnlinkAuth.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionUnlinkAuth} returns this
 */
proto.EosActionUnlinkAuth.prototype.setType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUnlinkAuth} returns this
 */
proto.EosActionUnlinkAuth.prototype.clearType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUnlinkAuth.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionNewAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionNewAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionNewAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionNewAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    creator: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    owner: (f = msg.getOwner()) && proto.EosAuthorization.toObject(includeInstance, f),
    active: (f = msg.getActive()) && proto.EosAuthorization.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionNewAccount}
 */
proto.EosActionNewAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionNewAccount;
  return proto.EosActionNewAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionNewAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionNewAccount}
 */
proto.EosActionNewAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setCreator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.EosAuthorization;
      reader.readMessage(value,proto.EosAuthorization.deserializeBinaryFromReader);
      msg.setOwner(value);
      break;
    case 4:
      var value = new proto.EosAuthorization;
      reader.readMessage(value,proto.EosAuthorization.deserializeBinaryFromReader);
      msg.setActive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionNewAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionNewAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionNewAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionNewAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getOwner();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.EosAuthorization.serializeBinaryToWriter
    );
  }
  f = message.getActive();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.EosAuthorization.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 creator = 1;
 * @return {string}
 */
proto.EosActionNewAccount.prototype.getCreator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionNewAccount} returns this
 */
proto.EosActionNewAccount.prototype.setCreator = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionNewAccount} returns this
 */
proto.EosActionNewAccount.prototype.clearCreator = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionNewAccount.prototype.hasCreator = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 name = 2;
 * @return {string}
 */
proto.EosActionNewAccount.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.EosActionNewAccount} returns this
 */
proto.EosActionNewAccount.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionNewAccount} returns this
 */
proto.EosActionNewAccount.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionNewAccount.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional EosAuthorization owner = 3;
 * @return {?proto.EosAuthorization}
 */
proto.EosActionNewAccount.prototype.getOwner = function() {
  return /** @type{?proto.EosAuthorization} */ (
    jspb.Message.getWrapperField(this, proto.EosAuthorization, 3));
};


/**
 * @param {?proto.EosAuthorization|undefined} value
 * @return {!proto.EosActionNewAccount} returns this
*/
proto.EosActionNewAccount.prototype.setOwner = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionNewAccount} returns this
 */
proto.EosActionNewAccount.prototype.clearOwner = function() {
  return this.setOwner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionNewAccount.prototype.hasOwner = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EosAuthorization active = 4;
 * @return {?proto.EosAuthorization}
 */
proto.EosActionNewAccount.prototype.getActive = function() {
  return /** @type{?proto.EosAuthorization} */ (
    jspb.Message.getWrapperField(this, proto.EosAuthorization, 4));
};


/**
 * @param {?proto.EosAuthorization|undefined} value
 * @return {!proto.EosActionNewAccount} returns this
*/
proto.EosActionNewAccount.prototype.setActive = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.EosActionNewAccount} returns this
 */
proto.EosActionNewAccount.prototype.clearActive = function() {
  return this.setActive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionNewAccount.prototype.hasActive = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosActionUnknown.prototype.toObject = function(opt_includeInstance) {
  return proto.EosActionUnknown.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosActionUnknown} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUnknown.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataSize: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    dataChunk: msg.getDataChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosActionUnknown}
 */
proto.EosActionUnknown.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosActionUnknown;
  return proto.EosActionUnknown.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosActionUnknown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosActionUnknown}
 */
proto.EosActionUnknown.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDataSize(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosActionUnknown.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosActionUnknown.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosActionUnknown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosActionUnknown.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional uint32 data_size = 1;
 * @return {number}
 */
proto.EosActionUnknown.prototype.getDataSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosActionUnknown} returns this
 */
proto.EosActionUnknown.prototype.setDataSize = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUnknown} returns this
 */
proto.EosActionUnknown.prototype.clearDataSize = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUnknown.prototype.hasDataSize = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes data_chunk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EosActionUnknown.prototype.getDataChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data_chunk = 2;
 * This is a type-conversion wrapper around `getDataChunk()`
 * @return {string}
 */
proto.EosActionUnknown.prototype.getDataChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataChunk()));
};


/**
 * optional bytes data_chunk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataChunk()`
 * @return {!Uint8Array}
 */
proto.EosActionUnknown.prototype.getDataChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.EosActionUnknown} returns this
 */
proto.EosActionUnknown.prototype.setDataChunk = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosActionUnknown} returns this
 */
proto.EosActionUnknown.prototype.clearDataChunk = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosActionUnknown.prototype.hasDataChunk = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EosSignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.EosSignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EosSignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosSignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    signatureV: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    signatureR: msg.getSignatureR_asB64(),
    signatureS: msg.getSignatureS_asB64(),
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EosSignedTx}
 */
proto.EosSignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EosSignedTx;
  return proto.EosSignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EosSignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EosSignedTx}
 */
proto.EosSignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSignatureV(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignatureR(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignatureS(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EosSignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EosSignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EosSignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EosSignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint32 signature_v = 1;
 * @return {number}
 */
proto.EosSignedTx.prototype.getSignatureV = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.setSignatureV = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.clearSignatureV = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosSignedTx.prototype.hasSignatureV = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature_r = 2;
 * @return {!(string|Uint8Array)}
 */
proto.EosSignedTx.prototype.getSignatureR = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature_r = 2;
 * This is a type-conversion wrapper around `getSignatureR()`
 * @return {string}
 */
proto.EosSignedTx.prototype.getSignatureR_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignatureR()));
};


/**
 * optional bytes signature_r = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureR()`
 * @return {!Uint8Array}
 */
proto.EosSignedTx.prototype.getSignatureR_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignatureR()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.setSignatureR = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.clearSignatureR = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosSignedTx.prototype.hasSignatureR = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes signature_s = 3;
 * @return {!(string|Uint8Array)}
 */
proto.EosSignedTx.prototype.getSignatureS = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature_s = 3;
 * This is a type-conversion wrapper around `getSignatureS()`
 * @return {string}
 */
proto.EosSignedTx.prototype.getSignatureS_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignatureS()));
};


/**
 * optional bytes signature_s = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignatureS()`
 * @return {!Uint8Array}
 */
proto.EosSignedTx.prototype.getSignatureS_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignatureS()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.setSignatureS = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.clearSignatureS = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosSignedTx.prototype.hasSignatureS = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.EosSignedTx.prototype.getHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes hash = 4;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.EosSignedTx.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.EosSignedTx.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.setHash = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.EosSignedTx} returns this
 */
proto.EosSignedTx.prototype.clearHash = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.EosSignedTx.prototype.hasHash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.EosPublicKeyKind = {
  EOS: 0,
  EOS_K1: 1,
  EOS_R1: 2
};

goog.object.extend(exports, proto);
