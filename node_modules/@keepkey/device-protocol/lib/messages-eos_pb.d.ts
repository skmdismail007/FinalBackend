// package: 
// file: messages-eos.proto

import * as jspb from "google-protobuf";

export class EosGetPublicKey extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasShowDisplay(): boolean;
  clearShowDisplay(): void;
  getShowDisplay(): boolean | undefined;
  setShowDisplay(value: boolean): void;

  hasKind(): boolean;
  clearKind(): void;
  getKind(): EosPublicKeyKindMap[keyof EosPublicKeyKindMap] | undefined;
  setKind(value: EosPublicKeyKindMap[keyof EosPublicKeyKindMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosGetPublicKey.AsObject;
  static toObject(includeInstance: boolean, msg: EosGetPublicKey): EosGetPublicKey.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosGetPublicKey, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosGetPublicKey;
  static deserializeBinaryFromReader(message: EosGetPublicKey, reader: jspb.BinaryReader): EosGetPublicKey;
}

export namespace EosGetPublicKey {
  export type AsObject = {
    addressNList: Array<number>,
    showDisplay?: boolean,
    kind?: EosPublicKeyKindMap[keyof EosPublicKeyKindMap],
  }
}

export class EosPublicKey extends jspb.Message {
  hasWifPublicKey(): boolean;
  clearWifPublicKey(): void;
  getWifPublicKey(): string | undefined;
  setWifPublicKey(value: string): void;

  hasRawPublicKey(): boolean;
  clearRawPublicKey(): void;
  getRawPublicKey(): Uint8Array | string;
  getRawPublicKey_asU8(): Uint8Array;
  getRawPublicKey_asB64(): string;
  setRawPublicKey(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosPublicKey.AsObject;
  static toObject(includeInstance: boolean, msg: EosPublicKey): EosPublicKey.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosPublicKey, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosPublicKey;
  static deserializeBinaryFromReader(message: EosPublicKey, reader: jspb.BinaryReader): EosPublicKey;
}

export namespace EosPublicKey {
  export type AsObject = {
    wifPublicKey?: string,
    rawPublicKey: Uint8Array | string,
  }
}

export class EosSignTx extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasChainId(): boolean;
  clearChainId(): void;
  getChainId(): Uint8Array | string;
  getChainId_asU8(): Uint8Array;
  getChainId_asB64(): string;
  setChainId(value: Uint8Array | string): void;

  hasHeader(): boolean;
  clearHeader(): void;
  getHeader(): EosTxHeader | undefined;
  setHeader(value?: EosTxHeader): void;

  hasNumActions(): boolean;
  clearNumActions(): void;
  getNumActions(): number | undefined;
  setNumActions(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosSignTx.AsObject;
  static toObject(includeInstance: boolean, msg: EosSignTx): EosSignTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosSignTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosSignTx;
  static deserializeBinaryFromReader(message: EosSignTx, reader: jspb.BinaryReader): EosSignTx;
}

export namespace EosSignTx {
  export type AsObject = {
    addressNList: Array<number>,
    chainId: Uint8Array | string,
    header?: EosTxHeader.AsObject,
    numActions?: number,
  }
}

export class EosTxHeader extends jspb.Message {
  hasExpiration(): boolean;
  clearExpiration(): void;
  getExpiration(): number | undefined;
  setExpiration(value: number): void;

  hasRefBlockNum(): boolean;
  clearRefBlockNum(): void;
  getRefBlockNum(): number | undefined;
  setRefBlockNum(value: number): void;

  hasRefBlockPrefix(): boolean;
  clearRefBlockPrefix(): void;
  getRefBlockPrefix(): number | undefined;
  setRefBlockPrefix(value: number): void;

  hasMaxNetUsageWords(): boolean;
  clearMaxNetUsageWords(): void;
  getMaxNetUsageWords(): number | undefined;
  setMaxNetUsageWords(value: number): void;

  hasMaxCpuUsageMs(): boolean;
  clearMaxCpuUsageMs(): void;
  getMaxCpuUsageMs(): number | undefined;
  setMaxCpuUsageMs(value: number): void;

  hasDelaySec(): boolean;
  clearDelaySec(): void;
  getDelaySec(): number | undefined;
  setDelaySec(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosTxHeader.AsObject;
  static toObject(includeInstance: boolean, msg: EosTxHeader): EosTxHeader.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosTxHeader, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosTxHeader;
  static deserializeBinaryFromReader(message: EosTxHeader, reader: jspb.BinaryReader): EosTxHeader;
}

export namespace EosTxHeader {
  export type AsObject = {
    expiration?: number,
    refBlockNum?: number,
    refBlockPrefix?: number,
    maxNetUsageWords?: number,
    maxCpuUsageMs?: number,
    delaySec?: number,
  }
}

export class EosTxActionRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosTxActionRequest.AsObject;
  static toObject(includeInstance: boolean, msg: EosTxActionRequest): EosTxActionRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosTxActionRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosTxActionRequest;
  static deserializeBinaryFromReader(message: EosTxActionRequest, reader: jspb.BinaryReader): EosTxActionRequest;
}

export namespace EosTxActionRequest {
  export type AsObject = {
  }
}

export class EosTxActionAck extends jspb.Message {
  hasCommon(): boolean;
  clearCommon(): void;
  getCommon(): EosActionCommon | undefined;
  setCommon(value?: EosActionCommon): void;

  hasTransfer(): boolean;
  clearTransfer(): void;
  getTransfer(): EosActionTransfer | undefined;
  setTransfer(value?: EosActionTransfer): void;

  hasDelegate(): boolean;
  clearDelegate(): void;
  getDelegate(): EosActionDelegate | undefined;
  setDelegate(value?: EosActionDelegate): void;

  hasUndelegate(): boolean;
  clearUndelegate(): void;
  getUndelegate(): EosActionUndelegate | undefined;
  setUndelegate(value?: EosActionUndelegate): void;

  hasRefund(): boolean;
  clearRefund(): void;
  getRefund(): EosActionRefund | undefined;
  setRefund(value?: EosActionRefund): void;

  hasBuyRam(): boolean;
  clearBuyRam(): void;
  getBuyRam(): EosActionBuyRam | undefined;
  setBuyRam(value?: EosActionBuyRam): void;

  hasBuyRamBytes(): boolean;
  clearBuyRamBytes(): void;
  getBuyRamBytes(): EosActionBuyRamBytes | undefined;
  setBuyRamBytes(value?: EosActionBuyRamBytes): void;

  hasSellRam(): boolean;
  clearSellRam(): void;
  getSellRam(): EosActionSellRam | undefined;
  setSellRam(value?: EosActionSellRam): void;

  hasVoteProducer(): boolean;
  clearVoteProducer(): void;
  getVoteProducer(): EosActionVoteProducer | undefined;
  setVoteProducer(value?: EosActionVoteProducer): void;

  hasUpdateAuth(): boolean;
  clearUpdateAuth(): void;
  getUpdateAuth(): EosActionUpdateAuth | undefined;
  setUpdateAuth(value?: EosActionUpdateAuth): void;

  hasDeleteAuth(): boolean;
  clearDeleteAuth(): void;
  getDeleteAuth(): EosActionDeleteAuth | undefined;
  setDeleteAuth(value?: EosActionDeleteAuth): void;

  hasLinkAuth(): boolean;
  clearLinkAuth(): void;
  getLinkAuth(): EosActionLinkAuth | undefined;
  setLinkAuth(value?: EosActionLinkAuth): void;

  hasUnlinkAuth(): boolean;
  clearUnlinkAuth(): void;
  getUnlinkAuth(): EosActionUnlinkAuth | undefined;
  setUnlinkAuth(value?: EosActionUnlinkAuth): void;

  hasNewAccount(): boolean;
  clearNewAccount(): void;
  getNewAccount(): EosActionNewAccount | undefined;
  setNewAccount(value?: EosActionNewAccount): void;

  hasUnknown(): boolean;
  clearUnknown(): void;
  getUnknown(): EosActionUnknown | undefined;
  setUnknown(value?: EosActionUnknown): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosTxActionAck.AsObject;
  static toObject(includeInstance: boolean, msg: EosTxActionAck): EosTxActionAck.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosTxActionAck, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosTxActionAck;
  static deserializeBinaryFromReader(message: EosTxActionAck, reader: jspb.BinaryReader): EosTxActionAck;
}

export namespace EosTxActionAck {
  export type AsObject = {
    common?: EosActionCommon.AsObject,
    transfer?: EosActionTransfer.AsObject,
    delegate?: EosActionDelegate.AsObject,
    undelegate?: EosActionUndelegate.AsObject,
    refund?: EosActionRefund.AsObject,
    buyRam?: EosActionBuyRam.AsObject,
    buyRamBytes?: EosActionBuyRamBytes.AsObject,
    sellRam?: EosActionSellRam.AsObject,
    voteProducer?: EosActionVoteProducer.AsObject,
    updateAuth?: EosActionUpdateAuth.AsObject,
    deleteAuth?: EosActionDeleteAuth.AsObject,
    linkAuth?: EosActionLinkAuth.AsObject,
    unlinkAuth?: EosActionUnlinkAuth.AsObject,
    newAccount?: EosActionNewAccount.AsObject,
    unknown?: EosActionUnknown.AsObject,
  }
}

export class EosAsset extends jspb.Message {
  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  hasSymbol(): boolean;
  clearSymbol(): void;
  getSymbol(): string | undefined;
  setSymbol(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosAsset.AsObject;
  static toObject(includeInstance: boolean, msg: EosAsset): EosAsset.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosAsset, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosAsset;
  static deserializeBinaryFromReader(message: EosAsset, reader: jspb.BinaryReader): EosAsset;
}

export namespace EosAsset {
  export type AsObject = {
    amount?: string,
    symbol?: string,
  }
}

export class EosPermissionLevel extends jspb.Message {
  hasActor(): boolean;
  clearActor(): void;
  getActor(): string | undefined;
  setActor(value: string): void;

  hasPermission(): boolean;
  clearPermission(): void;
  getPermission(): string | undefined;
  setPermission(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosPermissionLevel.AsObject;
  static toObject(includeInstance: boolean, msg: EosPermissionLevel): EosPermissionLevel.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosPermissionLevel, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosPermissionLevel;
  static deserializeBinaryFromReader(message: EosPermissionLevel, reader: jspb.BinaryReader): EosPermissionLevel;
}

export namespace EosPermissionLevel {
  export type AsObject = {
    actor?: string,
    permission?: string,
  }
}

export class EosAuthorizationKey extends jspb.Message {
  hasType(): boolean;
  clearType(): void;
  getType(): number | undefined;
  setType(value: number): void;

  hasKey(): boolean;
  clearKey(): void;
  getKey(): Uint8Array | string;
  getKey_asU8(): Uint8Array;
  getKey_asB64(): string;
  setKey(value: Uint8Array | string): void;

  hasWeight(): boolean;
  clearWeight(): void;
  getWeight(): number | undefined;
  setWeight(value: number): void;

  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosAuthorizationKey.AsObject;
  static toObject(includeInstance: boolean, msg: EosAuthorizationKey): EosAuthorizationKey.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosAuthorizationKey, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosAuthorizationKey;
  static deserializeBinaryFromReader(message: EosAuthorizationKey, reader: jspb.BinaryReader): EosAuthorizationKey;
}

export namespace EosAuthorizationKey {
  export type AsObject = {
    type?: number,
    key: Uint8Array | string,
    weight?: number,
    addressNList: Array<number>,
  }
}

export class EosAuthorizationAccount extends jspb.Message {
  hasAccount(): boolean;
  clearAccount(): void;
  getAccount(): EosPermissionLevel | undefined;
  setAccount(value?: EosPermissionLevel): void;

  hasWeight(): boolean;
  clearWeight(): void;
  getWeight(): number | undefined;
  setWeight(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosAuthorizationAccount.AsObject;
  static toObject(includeInstance: boolean, msg: EosAuthorizationAccount): EosAuthorizationAccount.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosAuthorizationAccount, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosAuthorizationAccount;
  static deserializeBinaryFromReader(message: EosAuthorizationAccount, reader: jspb.BinaryReader): EosAuthorizationAccount;
}

export namespace EosAuthorizationAccount {
  export type AsObject = {
    account?: EosPermissionLevel.AsObject,
    weight?: number,
  }
}

export class EosAuthorizationWait extends jspb.Message {
  hasWaitSec(): boolean;
  clearWaitSec(): void;
  getWaitSec(): number | undefined;
  setWaitSec(value: number): void;

  hasWeight(): boolean;
  clearWeight(): void;
  getWeight(): number | undefined;
  setWeight(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosAuthorizationWait.AsObject;
  static toObject(includeInstance: boolean, msg: EosAuthorizationWait): EosAuthorizationWait.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosAuthorizationWait, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosAuthorizationWait;
  static deserializeBinaryFromReader(message: EosAuthorizationWait, reader: jspb.BinaryReader): EosAuthorizationWait;
}

export namespace EosAuthorizationWait {
  export type AsObject = {
    waitSec?: number,
    weight?: number,
  }
}

export class EosAuthorization extends jspb.Message {
  hasThreshold(): boolean;
  clearThreshold(): void;
  getThreshold(): number | undefined;
  setThreshold(value: number): void;

  clearKeysList(): void;
  getKeysList(): Array<EosAuthorizationKey>;
  setKeysList(value: Array<EosAuthorizationKey>): void;
  addKeys(value?: EosAuthorizationKey, index?: number): EosAuthorizationKey;

  clearAccountsList(): void;
  getAccountsList(): Array<EosAuthorizationAccount>;
  setAccountsList(value: Array<EosAuthorizationAccount>): void;
  addAccounts(value?: EosAuthorizationAccount, index?: number): EosAuthorizationAccount;

  clearWaitsList(): void;
  getWaitsList(): Array<EosAuthorizationWait>;
  setWaitsList(value: Array<EosAuthorizationWait>): void;
  addWaits(value?: EosAuthorizationWait, index?: number): EosAuthorizationWait;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosAuthorization.AsObject;
  static toObject(includeInstance: boolean, msg: EosAuthorization): EosAuthorization.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosAuthorization, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosAuthorization;
  static deserializeBinaryFromReader(message: EosAuthorization, reader: jspb.BinaryReader): EosAuthorization;
}

export namespace EosAuthorization {
  export type AsObject = {
    threshold?: number,
    keysList: Array<EosAuthorizationKey.AsObject>,
    accountsList: Array<EosAuthorizationAccount.AsObject>,
    waitsList: Array<EosAuthorizationWait.AsObject>,
  }
}

export class EosActionCommon extends jspb.Message {
  hasAccount(): boolean;
  clearAccount(): void;
  getAccount(): string | undefined;
  setAccount(value: string): void;

  hasName(): boolean;
  clearName(): void;
  getName(): string | undefined;
  setName(value: string): void;

  clearAuthorizationList(): void;
  getAuthorizationList(): Array<EosPermissionLevel>;
  setAuthorizationList(value: Array<EosPermissionLevel>): void;
  addAuthorization(value?: EosPermissionLevel, index?: number): EosPermissionLevel;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionCommon.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionCommon): EosActionCommon.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionCommon, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionCommon;
  static deserializeBinaryFromReader(message: EosActionCommon, reader: jspb.BinaryReader): EosActionCommon;
}

export namespace EosActionCommon {
  export type AsObject = {
    account?: string,
    name?: string,
    authorizationList: Array<EosPermissionLevel.AsObject>,
  }
}

export class EosActionTransfer extends jspb.Message {
  hasSender(): boolean;
  clearSender(): void;
  getSender(): string | undefined;
  setSender(value: string): void;

  hasReceiver(): boolean;
  clearReceiver(): void;
  getReceiver(): string | undefined;
  setReceiver(value: string): void;

  hasQuantity(): boolean;
  clearQuantity(): void;
  getQuantity(): EosAsset | undefined;
  setQuantity(value?: EosAsset): void;

  hasMemo(): boolean;
  clearMemo(): void;
  getMemo(): string | undefined;
  setMemo(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionTransfer.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionTransfer): EosActionTransfer.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionTransfer, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionTransfer;
  static deserializeBinaryFromReader(message: EosActionTransfer, reader: jspb.BinaryReader): EosActionTransfer;
}

export namespace EosActionTransfer {
  export type AsObject = {
    sender?: string,
    receiver?: string,
    quantity?: EosAsset.AsObject,
    memo?: string,
  }
}

export class EosActionDelegate extends jspb.Message {
  hasSender(): boolean;
  clearSender(): void;
  getSender(): string | undefined;
  setSender(value: string): void;

  hasReceiver(): boolean;
  clearReceiver(): void;
  getReceiver(): string | undefined;
  setReceiver(value: string): void;

  hasNetQuantity(): boolean;
  clearNetQuantity(): void;
  getNetQuantity(): EosAsset | undefined;
  setNetQuantity(value?: EosAsset): void;

  hasCpuQuantity(): boolean;
  clearCpuQuantity(): void;
  getCpuQuantity(): EosAsset | undefined;
  setCpuQuantity(value?: EosAsset): void;

  hasTransfer(): boolean;
  clearTransfer(): void;
  getTransfer(): boolean | undefined;
  setTransfer(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionDelegate.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionDelegate): EosActionDelegate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionDelegate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionDelegate;
  static deserializeBinaryFromReader(message: EosActionDelegate, reader: jspb.BinaryReader): EosActionDelegate;
}

export namespace EosActionDelegate {
  export type AsObject = {
    sender?: string,
    receiver?: string,
    netQuantity?: EosAsset.AsObject,
    cpuQuantity?: EosAsset.AsObject,
    transfer?: boolean,
  }
}

export class EosActionUndelegate extends jspb.Message {
  hasSender(): boolean;
  clearSender(): void;
  getSender(): string | undefined;
  setSender(value: string): void;

  hasReceiver(): boolean;
  clearReceiver(): void;
  getReceiver(): string | undefined;
  setReceiver(value: string): void;

  hasNetQuantity(): boolean;
  clearNetQuantity(): void;
  getNetQuantity(): EosAsset | undefined;
  setNetQuantity(value?: EosAsset): void;

  hasCpuQuantity(): boolean;
  clearCpuQuantity(): void;
  getCpuQuantity(): EosAsset | undefined;
  setCpuQuantity(value?: EosAsset): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionUndelegate.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionUndelegate): EosActionUndelegate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionUndelegate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionUndelegate;
  static deserializeBinaryFromReader(message: EosActionUndelegate, reader: jspb.BinaryReader): EosActionUndelegate;
}

export namespace EosActionUndelegate {
  export type AsObject = {
    sender?: string,
    receiver?: string,
    netQuantity?: EosAsset.AsObject,
    cpuQuantity?: EosAsset.AsObject,
  }
}

export class EosActionRefund extends jspb.Message {
  hasOwner(): boolean;
  clearOwner(): void;
  getOwner(): string | undefined;
  setOwner(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionRefund.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionRefund): EosActionRefund.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionRefund, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionRefund;
  static deserializeBinaryFromReader(message: EosActionRefund, reader: jspb.BinaryReader): EosActionRefund;
}

export namespace EosActionRefund {
  export type AsObject = {
    owner?: string,
  }
}

export class EosActionBuyRam extends jspb.Message {
  hasPayer(): boolean;
  clearPayer(): void;
  getPayer(): string | undefined;
  setPayer(value: string): void;

  hasReceiver(): boolean;
  clearReceiver(): void;
  getReceiver(): string | undefined;
  setReceiver(value: string): void;

  hasQuantity(): boolean;
  clearQuantity(): void;
  getQuantity(): EosAsset | undefined;
  setQuantity(value?: EosAsset): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionBuyRam.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionBuyRam): EosActionBuyRam.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionBuyRam, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionBuyRam;
  static deserializeBinaryFromReader(message: EosActionBuyRam, reader: jspb.BinaryReader): EosActionBuyRam;
}

export namespace EosActionBuyRam {
  export type AsObject = {
    payer?: string,
    receiver?: string,
    quantity?: EosAsset.AsObject,
  }
}

export class EosActionBuyRamBytes extends jspb.Message {
  hasPayer(): boolean;
  clearPayer(): void;
  getPayer(): string | undefined;
  setPayer(value: string): void;

  hasReceiver(): boolean;
  clearReceiver(): void;
  getReceiver(): string | undefined;
  setReceiver(value: string): void;

  hasBytes(): boolean;
  clearBytes(): void;
  getBytes(): number | undefined;
  setBytes(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionBuyRamBytes.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionBuyRamBytes): EosActionBuyRamBytes.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionBuyRamBytes, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionBuyRamBytes;
  static deserializeBinaryFromReader(message: EosActionBuyRamBytes, reader: jspb.BinaryReader): EosActionBuyRamBytes;
}

export namespace EosActionBuyRamBytes {
  export type AsObject = {
    payer?: string,
    receiver?: string,
    bytes?: number,
  }
}

export class EosActionSellRam extends jspb.Message {
  hasAccount(): boolean;
  clearAccount(): void;
  getAccount(): string | undefined;
  setAccount(value: string): void;

  hasBytes(): boolean;
  clearBytes(): void;
  getBytes(): string | undefined;
  setBytes(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionSellRam.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionSellRam): EosActionSellRam.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionSellRam, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionSellRam;
  static deserializeBinaryFromReader(message: EosActionSellRam, reader: jspb.BinaryReader): EosActionSellRam;
}

export namespace EosActionSellRam {
  export type AsObject = {
    account?: string,
    bytes?: string,
  }
}

export class EosActionVoteProducer extends jspb.Message {
  hasVoter(): boolean;
  clearVoter(): void;
  getVoter(): string | undefined;
  setVoter(value: string): void;

  hasProxy(): boolean;
  clearProxy(): void;
  getProxy(): string | undefined;
  setProxy(value: string): void;

  clearProducersList(): void;
  getProducersList(): Array<string>;
  setProducersList(value: Array<string>): void;
  addProducers(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionVoteProducer.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionVoteProducer): EosActionVoteProducer.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionVoteProducer, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionVoteProducer;
  static deserializeBinaryFromReader(message: EosActionVoteProducer, reader: jspb.BinaryReader): EosActionVoteProducer;
}

export namespace EosActionVoteProducer {
  export type AsObject = {
    voter?: string,
    proxy?: string,
    producersList: Array<string>,
  }
}

export class EosActionUpdateAuth extends jspb.Message {
  hasAccount(): boolean;
  clearAccount(): void;
  getAccount(): string | undefined;
  setAccount(value: string): void;

  hasPermission(): boolean;
  clearPermission(): void;
  getPermission(): string | undefined;
  setPermission(value: string): void;

  hasParent(): boolean;
  clearParent(): void;
  getParent(): string | undefined;
  setParent(value: string): void;

  hasAuth(): boolean;
  clearAuth(): void;
  getAuth(): EosAuthorization | undefined;
  setAuth(value?: EosAuthorization): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionUpdateAuth.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionUpdateAuth): EosActionUpdateAuth.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionUpdateAuth, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionUpdateAuth;
  static deserializeBinaryFromReader(message: EosActionUpdateAuth, reader: jspb.BinaryReader): EosActionUpdateAuth;
}

export namespace EosActionUpdateAuth {
  export type AsObject = {
    account?: string,
    permission?: string,
    parent?: string,
    auth?: EosAuthorization.AsObject,
  }
}

export class EosActionDeleteAuth extends jspb.Message {
  hasAccount(): boolean;
  clearAccount(): void;
  getAccount(): string | undefined;
  setAccount(value: string): void;

  hasPermission(): boolean;
  clearPermission(): void;
  getPermission(): string | undefined;
  setPermission(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionDeleteAuth.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionDeleteAuth): EosActionDeleteAuth.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionDeleteAuth, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionDeleteAuth;
  static deserializeBinaryFromReader(message: EosActionDeleteAuth, reader: jspb.BinaryReader): EosActionDeleteAuth;
}

export namespace EosActionDeleteAuth {
  export type AsObject = {
    account?: string,
    permission?: string,
  }
}

export class EosActionLinkAuth extends jspb.Message {
  hasAccount(): boolean;
  clearAccount(): void;
  getAccount(): string | undefined;
  setAccount(value: string): void;

  hasCode(): boolean;
  clearCode(): void;
  getCode(): string | undefined;
  setCode(value: string): void;

  hasType(): boolean;
  clearType(): void;
  getType(): string | undefined;
  setType(value: string): void;

  hasRequirement(): boolean;
  clearRequirement(): void;
  getRequirement(): string | undefined;
  setRequirement(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionLinkAuth.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionLinkAuth): EosActionLinkAuth.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionLinkAuth, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionLinkAuth;
  static deserializeBinaryFromReader(message: EosActionLinkAuth, reader: jspb.BinaryReader): EosActionLinkAuth;
}

export namespace EosActionLinkAuth {
  export type AsObject = {
    account?: string,
    code?: string,
    type?: string,
    requirement?: string,
  }
}

export class EosActionUnlinkAuth extends jspb.Message {
  hasAccount(): boolean;
  clearAccount(): void;
  getAccount(): string | undefined;
  setAccount(value: string): void;

  hasCode(): boolean;
  clearCode(): void;
  getCode(): string | undefined;
  setCode(value: string): void;

  hasType(): boolean;
  clearType(): void;
  getType(): string | undefined;
  setType(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionUnlinkAuth.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionUnlinkAuth): EosActionUnlinkAuth.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionUnlinkAuth, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionUnlinkAuth;
  static deserializeBinaryFromReader(message: EosActionUnlinkAuth, reader: jspb.BinaryReader): EosActionUnlinkAuth;
}

export namespace EosActionUnlinkAuth {
  export type AsObject = {
    account?: string,
    code?: string,
    type?: string,
  }
}

export class EosActionNewAccount extends jspb.Message {
  hasCreator(): boolean;
  clearCreator(): void;
  getCreator(): string | undefined;
  setCreator(value: string): void;

  hasName(): boolean;
  clearName(): void;
  getName(): string | undefined;
  setName(value: string): void;

  hasOwner(): boolean;
  clearOwner(): void;
  getOwner(): EosAuthorization | undefined;
  setOwner(value?: EosAuthorization): void;

  hasActive(): boolean;
  clearActive(): void;
  getActive(): EosAuthorization | undefined;
  setActive(value?: EosAuthorization): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionNewAccount.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionNewAccount): EosActionNewAccount.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionNewAccount, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionNewAccount;
  static deserializeBinaryFromReader(message: EosActionNewAccount, reader: jspb.BinaryReader): EosActionNewAccount;
}

export namespace EosActionNewAccount {
  export type AsObject = {
    creator?: string,
    name?: string,
    owner?: EosAuthorization.AsObject,
    active?: EosAuthorization.AsObject,
  }
}

export class EosActionUnknown extends jspb.Message {
  hasDataSize(): boolean;
  clearDataSize(): void;
  getDataSize(): number | undefined;
  setDataSize(value: number): void;

  hasDataChunk(): boolean;
  clearDataChunk(): void;
  getDataChunk(): Uint8Array | string;
  getDataChunk_asU8(): Uint8Array;
  getDataChunk_asB64(): string;
  setDataChunk(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosActionUnknown.AsObject;
  static toObject(includeInstance: boolean, msg: EosActionUnknown): EosActionUnknown.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosActionUnknown, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosActionUnknown;
  static deserializeBinaryFromReader(message: EosActionUnknown, reader: jspb.BinaryReader): EosActionUnknown;
}

export namespace EosActionUnknown {
  export type AsObject = {
    dataSize?: number,
    dataChunk: Uint8Array | string,
  }
}

export class EosSignedTx extends jspb.Message {
  hasSignatureV(): boolean;
  clearSignatureV(): void;
  getSignatureV(): number | undefined;
  setSignatureV(value: number): void;

  hasSignatureR(): boolean;
  clearSignatureR(): void;
  getSignatureR(): Uint8Array | string;
  getSignatureR_asU8(): Uint8Array;
  getSignatureR_asB64(): string;
  setSignatureR(value: Uint8Array | string): void;

  hasSignatureS(): boolean;
  clearSignatureS(): void;
  getSignatureS(): Uint8Array | string;
  getSignatureS_asU8(): Uint8Array;
  getSignatureS_asB64(): string;
  setSignatureS(value: Uint8Array | string): void;

  hasHash(): boolean;
  clearHash(): void;
  getHash(): Uint8Array | string;
  getHash_asU8(): Uint8Array;
  getHash_asB64(): string;
  setHash(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EosSignedTx.AsObject;
  static toObject(includeInstance: boolean, msg: EosSignedTx): EosSignedTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EosSignedTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EosSignedTx;
  static deserializeBinaryFromReader(message: EosSignedTx, reader: jspb.BinaryReader): EosSignedTx;
}

export namespace EosSignedTx {
  export type AsObject = {
    signatureV?: number,
    signatureR: Uint8Array | string,
    signatureS: Uint8Array | string,
    hash: Uint8Array | string,
  }
}

export interface EosPublicKeyKindMap {
  EOS: 0;
  EOS_K1: 1;
  EOS_R1: 2;
}

export const EosPublicKeyKind: EosPublicKeyKindMap;

