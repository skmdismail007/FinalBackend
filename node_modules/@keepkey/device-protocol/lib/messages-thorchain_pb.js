// source: messages-thorchain.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var types_pb = require('./types_pb.js');
goog.object.extend(proto, types_pb);
goog.exportSymbol('proto.ThorchainAddress', null, global);
goog.exportSymbol('proto.ThorchainGetAddress', null, global);
goog.exportSymbol('proto.ThorchainMsgAck', null, global);
goog.exportSymbol('proto.ThorchainMsgDeposit', null, global);
goog.exportSymbol('proto.ThorchainMsgRequest', null, global);
goog.exportSymbol('proto.ThorchainMsgSend', null, global);
goog.exportSymbol('proto.ThorchainSignTx', null, global);
goog.exportSymbol('proto.ThorchainSignedTx', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainGetAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ThorchainGetAddress.repeatedFields_, null);
};
goog.inherits(proto.ThorchainGetAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainGetAddress.displayName = 'proto.ThorchainGetAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ThorchainAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainAddress.displayName = 'proto.ThorchainAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainSignTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ThorchainSignTx.repeatedFields_, null);
};
goog.inherits(proto.ThorchainSignTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainSignTx.displayName = 'proto.ThorchainSignTx';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainMsgRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ThorchainMsgRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainMsgRequest.displayName = 'proto.ThorchainMsgRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainMsgAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ThorchainMsgAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainMsgAck.displayName = 'proto.ThorchainMsgAck';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainMsgSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ThorchainMsgSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainMsgSend.displayName = 'proto.ThorchainMsgSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainMsgDeposit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ThorchainMsgDeposit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainMsgDeposit.displayName = 'proto.ThorchainMsgDeposit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ThorchainSignedTx = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ThorchainSignedTx, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ThorchainSignedTx.displayName = 'proto.ThorchainSignedTx';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ThorchainGetAddress.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainGetAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainGetAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainGetAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainGetAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    showDisplay: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainGetAddress}
 */
proto.ThorchainGetAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainGetAddress;
  return proto.ThorchainGetAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainGetAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainGetAddress}
 */
proto.ThorchainGetAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShowDisplay(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainGetAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainGetAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainGetAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainGetAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.ThorchainGetAddress.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ThorchainGetAddress} returns this
 */
proto.ThorchainGetAddress.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ThorchainGetAddress} returns this
 */
proto.ThorchainGetAddress.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ThorchainGetAddress} returns this
 */
proto.ThorchainGetAddress.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional bool show_display = 2;
 * @return {boolean}
 */
proto.ThorchainGetAddress.prototype.getShowDisplay = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ThorchainGetAddress} returns this
 */
proto.ThorchainGetAddress.prototype.setShowDisplay = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainGetAddress} returns this
 */
proto.ThorchainGetAddress.prototype.clearShowDisplay = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainGetAddress.prototype.hasShowDisplay = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool testnet = 3;
 * @return {boolean}
 */
proto.ThorchainGetAddress.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ThorchainGetAddress} returns this
 */
proto.ThorchainGetAddress.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainGetAddress} returns this
 */
proto.ThorchainGetAddress.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainGetAddress.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainAddress}
 */
proto.ThorchainAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainAddress;
  return proto.ThorchainAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainAddress}
 */
proto.ThorchainAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ThorchainAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainAddress} returns this
 */
proto.ThorchainAddress.prototype.setAddress = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainAddress} returns this
 */
proto.ThorchainAddress.prototype.clearAddress = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainAddress.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ThorchainSignTx.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainSignTx.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainSignTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainSignTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainSignTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    addressNList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    accountNumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    chainId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    feeAmount: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    gas: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    memo: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    sequence: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    msgCount: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    testnet: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainSignTx}
 */
proto.ThorchainSignTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainSignTx;
  return proto.ThorchainSignTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainSignTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainSignTx}
 */
proto.ThorchainSignTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addAddressN(values[i]);
      }
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccountNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFeeAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGas(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setSequence(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgCount(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainSignTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainSignTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainSignTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainSignTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddressNList();
  if (f.length > 0) {
    writer.writeRepeatedUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64String(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * repeated uint32 address_n = 1;
 * @return {!Array<number>}
 */
proto.ThorchainSignTx.prototype.getAddressNList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setAddressNList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.addAddressN = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearAddressNList = function() {
  return this.setAddressNList([]);
};


/**
 * optional uint64 account_number = 2;
 * @return {string}
 */
proto.ThorchainSignTx.prototype.getAccountNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setAccountNumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearAccountNumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasAccountNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.ThorchainSignTx.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setChainId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearChainId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasChainId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 fee_amount = 4;
 * @return {number}
 */
proto.ThorchainSignTx.prototype.getFeeAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setFeeAmount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearFeeAmount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasFeeAmount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 gas = 5;
 * @return {number}
 */
proto.ThorchainSignTx.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setGas = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearGas = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasGas = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.ThorchainSignTx.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint64 sequence = 7;
 * @return {string}
 */
proto.ThorchainSignTx.prototype.getSequence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setSequence = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearSequence = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasSequence = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 msg_count = 8;
 * @return {number}
 */
proto.ThorchainSignTx.prototype.getMsgCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setMsgCount = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearMsgCount = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasMsgCount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool testnet = 9;
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.setTestnet = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignTx} returns this
 */
proto.ThorchainSignTx.prototype.clearTestnet = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignTx.prototype.hasTestnet = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainMsgRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainMsgRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainMsgRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainMsgRequest}
 */
proto.ThorchainMsgRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainMsgRequest;
  return proto.ThorchainMsgRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainMsgRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainMsgRequest}
 */
proto.ThorchainMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainMsgRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainMsgRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainMsgRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainMsgAck.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainMsgAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainMsgAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    send: (f = msg.getSend()) && proto.ThorchainMsgSend.toObject(includeInstance, f),
    deposit: (f = msg.getDeposit()) && proto.ThorchainMsgDeposit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainMsgAck}
 */
proto.ThorchainMsgAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainMsgAck;
  return proto.ThorchainMsgAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainMsgAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainMsgAck}
 */
proto.ThorchainMsgAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ThorchainMsgSend;
      reader.readMessage(value,proto.ThorchainMsgSend.deserializeBinaryFromReader);
      msg.setSend(value);
      break;
    case 2:
      var value = new proto.ThorchainMsgDeposit;
      reader.readMessage(value,proto.ThorchainMsgDeposit.deserializeBinaryFromReader);
      msg.setDeposit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainMsgAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainMsgAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainMsgAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSend();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ThorchainMsgSend.serializeBinaryToWriter
    );
  }
  f = message.getDeposit();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ThorchainMsgDeposit.serializeBinaryToWriter
    );
  }
};


/**
 * optional ThorchainMsgSend send = 1;
 * @return {?proto.ThorchainMsgSend}
 */
proto.ThorchainMsgAck.prototype.getSend = function() {
  return /** @type{?proto.ThorchainMsgSend} */ (
    jspb.Message.getWrapperField(this, proto.ThorchainMsgSend, 1));
};


/**
 * @param {?proto.ThorchainMsgSend|undefined} value
 * @return {!proto.ThorchainMsgAck} returns this
*/
proto.ThorchainMsgAck.prototype.setSend = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ThorchainMsgAck} returns this
 */
proto.ThorchainMsgAck.prototype.clearSend = function() {
  return this.setSend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgAck.prototype.hasSend = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ThorchainMsgDeposit deposit = 2;
 * @return {?proto.ThorchainMsgDeposit}
 */
proto.ThorchainMsgAck.prototype.getDeposit = function() {
  return /** @type{?proto.ThorchainMsgDeposit} */ (
    jspb.Message.getWrapperField(this, proto.ThorchainMsgDeposit, 2));
};


/**
 * @param {?proto.ThorchainMsgDeposit|undefined} value
 * @return {!proto.ThorchainMsgAck} returns this
*/
proto.ThorchainMsgAck.prototype.setDeposit = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ThorchainMsgAck} returns this
 */
proto.ThorchainMsgAck.prototype.clearDeposit = function() {
  return this.setDeposit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgAck.prototype.hasDeposit = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainMsgSend.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainMsgSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainMsgSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgSend.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromAddress: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    toAddress: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    addressType: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainMsgSend}
 */
proto.ThorchainMsgSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainMsgSend;
  return proto.ThorchainMsgSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainMsgSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainMsgSend}
 */
proto.ThorchainMsgSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromAddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setToAddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    case 9:
      var value = /** @type {!proto.OutputAddressType} */ (reader.readEnum());
      msg.setAddressType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainMsgSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainMsgSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainMsgSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64String(
      8,
      f
    );
  }
  f = /** @type {!proto.OutputAddressType} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional string from_address = 6;
 * @return {string}
 */
proto.ThorchainMsgSend.prototype.getFromAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.setFromAddress = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.clearFromAddress = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgSend.prototype.hasFromAddress = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string to_address = 7;
 * @return {string}
 */
proto.ThorchainMsgSend.prototype.getToAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.setToAddress = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.clearToAddress = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgSend.prototype.hasToAddress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 amount = 8;
 * @return {string}
 */
proto.ThorchainMsgSend.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgSend.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional OutputAddressType address_type = 9;
 * @return {!proto.OutputAddressType}
 */
proto.ThorchainMsgSend.prototype.getAddressType = function() {
  return /** @type {!proto.OutputAddressType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.OutputAddressType} value
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.setAddressType = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgSend} returns this
 */
proto.ThorchainMsgSend.prototype.clearAddressType = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgSend.prototype.hasAddressType = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainMsgDeposit.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainMsgDeposit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainMsgDeposit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgDeposit.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    amount: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    memo: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    signer: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainMsgDeposit}
 */
proto.ThorchainMsgDeposit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainMsgDeposit;
  return proto.ThorchainMsgDeposit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainMsgDeposit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainMsgDeposit}
 */
proto.ThorchainMsgDeposit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAmount(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainMsgDeposit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainMsgDeposit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainMsgDeposit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainMsgDeposit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string asset = 1;
 * @return {string}
 */
proto.ThorchainMsgDeposit.prototype.getAsset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.setAsset = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.clearAsset = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgDeposit.prototype.hasAsset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 amount = 2;
 * @return {string}
 */
proto.ThorchainMsgDeposit.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.setAmount = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.clearAmount = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgDeposit.prototype.hasAmount = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string memo = 3;
 * @return {string}
 */
proto.ThorchainMsgDeposit.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.setMemo = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.clearMemo = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgDeposit.prototype.hasMemo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string signer = 4;
 * @return {string}
 */
proto.ThorchainMsgDeposit.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.setSigner = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainMsgDeposit} returns this
 */
proto.ThorchainMsgDeposit.prototype.clearSigner = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainMsgDeposit.prototype.hasSigner = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ThorchainSignedTx.prototype.toObject = function(opt_includeInstance) {
  return proto.ThorchainSignedTx.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ThorchainSignedTx} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainSignedTx.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ThorchainSignedTx}
 */
proto.ThorchainSignedTx.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ThorchainSignedTx;
  return proto.ThorchainSignedTx.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ThorchainSignedTx} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ThorchainSignedTx}
 */
proto.ThorchainSignedTx.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ThorchainSignedTx.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ThorchainSignedTx.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ThorchainSignedTx} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ThorchainSignedTx.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ThorchainSignedTx.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.ThorchainSignedTx.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.ThorchainSignedTx.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ThorchainSignedTx} returns this
 */
proto.ThorchainSignedTx.prototype.setPublicKey = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignedTx} returns this
 */
proto.ThorchainSignedTx.prototype.clearPublicKey = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignedTx.prototype.hasPublicKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ThorchainSignedTx.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.ThorchainSignedTx.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.ThorchainSignedTx.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ThorchainSignedTx} returns this
 */
proto.ThorchainSignedTx.prototype.setSignature = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ThorchainSignedTx} returns this
 */
proto.ThorchainSignedTx.prototype.clearSignature = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ThorchainSignedTx.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
