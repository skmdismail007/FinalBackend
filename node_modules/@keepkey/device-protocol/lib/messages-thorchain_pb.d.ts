// package: 
// file: messages-thorchain.proto

import * as jspb from "google-protobuf";
import * as types_pb from "./types_pb";

export class ThorchainGetAddress extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasShowDisplay(): boolean;
  clearShowDisplay(): void;
  getShowDisplay(): boolean | undefined;
  setShowDisplay(value: boolean): void;

  hasTestnet(): boolean;
  clearTestnet(): void;
  getTestnet(): boolean | undefined;
  setTestnet(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainGetAddress.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainGetAddress): ThorchainGetAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainGetAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainGetAddress;
  static deserializeBinaryFromReader(message: ThorchainGetAddress, reader: jspb.BinaryReader): ThorchainGetAddress;
}

export namespace ThorchainGetAddress {
  export type AsObject = {
    addressNList: Array<number>,
    showDisplay?: boolean,
    testnet?: boolean,
  }
}

export class ThorchainAddress extends jspb.Message {
  hasAddress(): boolean;
  clearAddress(): void;
  getAddress(): string | undefined;
  setAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainAddress.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainAddress): ThorchainAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainAddress;
  static deserializeBinaryFromReader(message: ThorchainAddress, reader: jspb.BinaryReader): ThorchainAddress;
}

export namespace ThorchainAddress {
  export type AsObject = {
    address?: string,
  }
}

export class ThorchainSignTx extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasAccountNumber(): boolean;
  clearAccountNumber(): void;
  getAccountNumber(): string | undefined;
  setAccountNumber(value: string): void;

  hasChainId(): boolean;
  clearChainId(): void;
  getChainId(): string | undefined;
  setChainId(value: string): void;

  hasFeeAmount(): boolean;
  clearFeeAmount(): void;
  getFeeAmount(): number | undefined;
  setFeeAmount(value: number): void;

  hasGas(): boolean;
  clearGas(): void;
  getGas(): number | undefined;
  setGas(value: number): void;

  hasMemo(): boolean;
  clearMemo(): void;
  getMemo(): string | undefined;
  setMemo(value: string): void;

  hasSequence(): boolean;
  clearSequence(): void;
  getSequence(): string | undefined;
  setSequence(value: string): void;

  hasMsgCount(): boolean;
  clearMsgCount(): void;
  getMsgCount(): number | undefined;
  setMsgCount(value: number): void;

  hasTestnet(): boolean;
  clearTestnet(): void;
  getTestnet(): boolean | undefined;
  setTestnet(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainSignTx.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainSignTx): ThorchainSignTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainSignTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainSignTx;
  static deserializeBinaryFromReader(message: ThorchainSignTx, reader: jspb.BinaryReader): ThorchainSignTx;
}

export namespace ThorchainSignTx {
  export type AsObject = {
    addressNList: Array<number>,
    accountNumber?: string,
    chainId?: string,
    feeAmount?: number,
    gas?: number,
    memo?: string,
    sequence?: string,
    msgCount?: number,
    testnet?: boolean,
  }
}

export class ThorchainMsgRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainMsgRequest.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainMsgRequest): ThorchainMsgRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainMsgRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainMsgRequest;
  static deserializeBinaryFromReader(message: ThorchainMsgRequest, reader: jspb.BinaryReader): ThorchainMsgRequest;
}

export namespace ThorchainMsgRequest {
  export type AsObject = {
  }
}

export class ThorchainMsgAck extends jspb.Message {
  hasSend(): boolean;
  clearSend(): void;
  getSend(): ThorchainMsgSend | undefined;
  setSend(value?: ThorchainMsgSend): void;

  hasDeposit(): boolean;
  clearDeposit(): void;
  getDeposit(): ThorchainMsgDeposit | undefined;
  setDeposit(value?: ThorchainMsgDeposit): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainMsgAck.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainMsgAck): ThorchainMsgAck.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainMsgAck, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainMsgAck;
  static deserializeBinaryFromReader(message: ThorchainMsgAck, reader: jspb.BinaryReader): ThorchainMsgAck;
}

export namespace ThorchainMsgAck {
  export type AsObject = {
    send?: ThorchainMsgSend.AsObject,
    deposit?: ThorchainMsgDeposit.AsObject,
  }
}

export class ThorchainMsgSend extends jspb.Message {
  hasFromAddress(): boolean;
  clearFromAddress(): void;
  getFromAddress(): string | undefined;
  setFromAddress(value: string): void;

  hasToAddress(): boolean;
  clearToAddress(): void;
  getToAddress(): string | undefined;
  setToAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  hasAddressType(): boolean;
  clearAddressType(): void;
  getAddressType(): types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap] | undefined;
  setAddressType(value: types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainMsgSend.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainMsgSend): ThorchainMsgSend.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainMsgSend, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainMsgSend;
  static deserializeBinaryFromReader(message: ThorchainMsgSend, reader: jspb.BinaryReader): ThorchainMsgSend;
}

export namespace ThorchainMsgSend {
  export type AsObject = {
    fromAddress?: string,
    toAddress?: string,
    amount?: string,
    addressType?: types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap],
  }
}

export class ThorchainMsgDeposit extends jspb.Message {
  hasAsset(): boolean;
  clearAsset(): void;
  getAsset(): string | undefined;
  setAsset(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  hasMemo(): boolean;
  clearMemo(): void;
  getMemo(): string | undefined;
  setMemo(value: string): void;

  hasSigner(): boolean;
  clearSigner(): void;
  getSigner(): string | undefined;
  setSigner(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainMsgDeposit.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainMsgDeposit): ThorchainMsgDeposit.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainMsgDeposit, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainMsgDeposit;
  static deserializeBinaryFromReader(message: ThorchainMsgDeposit, reader: jspb.BinaryReader): ThorchainMsgDeposit;
}

export namespace ThorchainMsgDeposit {
  export type AsObject = {
    asset?: string,
    amount?: string,
    memo?: string,
    signer?: string,
  }
}

export class ThorchainSignedTx extends jspb.Message {
  hasPublicKey(): boolean;
  clearPublicKey(): void;
  getPublicKey(): Uint8Array | string;
  getPublicKey_asU8(): Uint8Array;
  getPublicKey_asB64(): string;
  setPublicKey(value: Uint8Array | string): void;

  hasSignature(): boolean;
  clearSignature(): void;
  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): ThorchainSignedTx.AsObject;
  static toObject(includeInstance: boolean, msg: ThorchainSignedTx): ThorchainSignedTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ThorchainSignedTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ThorchainSignedTx;
  static deserializeBinaryFromReader(message: ThorchainSignedTx, reader: jspb.BinaryReader): ThorchainSignedTx;
}

export namespace ThorchainSignedTx {
  export type AsObject = {
    publicKey: Uint8Array | string,
    signature: Uint8Array | string,
  }
}

