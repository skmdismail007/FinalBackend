// package: 
// file: messages-tendermint.proto

import * as jspb from "google-protobuf";
import * as types_pb from "./types_pb";

export class TendermintGetAddress extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasShowDisplay(): boolean;
  clearShowDisplay(): void;
  getShowDisplay(): boolean | undefined;
  setShowDisplay(value: boolean): void;

  hasTestnet(): boolean;
  clearTestnet(): void;
  getTestnet(): boolean | undefined;
  setTestnet(value: boolean): void;

  hasAddressPrefix(): boolean;
  clearAddressPrefix(): void;
  getAddressPrefix(): string | undefined;
  setAddressPrefix(value: string): void;

  hasChainName(): boolean;
  clearChainName(): void;
  getChainName(): string | undefined;
  setChainName(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintGetAddress.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintGetAddress): TendermintGetAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintGetAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintGetAddress;
  static deserializeBinaryFromReader(message: TendermintGetAddress, reader: jspb.BinaryReader): TendermintGetAddress;
}

export namespace TendermintGetAddress {
  export type AsObject = {
    addressNList: Array<number>,
    showDisplay?: boolean,
    testnet?: boolean,
    addressPrefix?: string,
    chainName?: string,
  }
}

export class TendermintAddress extends jspb.Message {
  hasAddress(): boolean;
  clearAddress(): void;
  getAddress(): string | undefined;
  setAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintAddress.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintAddress): TendermintAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintAddress;
  static deserializeBinaryFromReader(message: TendermintAddress, reader: jspb.BinaryReader): TendermintAddress;
}

export namespace TendermintAddress {
  export type AsObject = {
    address?: string,
  }
}

export class TendermintSignTx extends jspb.Message {
  clearAddressNList(): void;
  getAddressNList(): Array<number>;
  setAddressNList(value: Array<number>): void;
  addAddressN(value: number, index?: number): number;

  hasAccountNumber(): boolean;
  clearAccountNumber(): void;
  getAccountNumber(): string | undefined;
  setAccountNumber(value: string): void;

  hasChainId(): boolean;
  clearChainId(): void;
  getChainId(): string | undefined;
  setChainId(value: string): void;

  hasFeeAmount(): boolean;
  clearFeeAmount(): void;
  getFeeAmount(): number | undefined;
  setFeeAmount(value: number): void;

  hasGas(): boolean;
  clearGas(): void;
  getGas(): number | undefined;
  setGas(value: number): void;

  hasMemo(): boolean;
  clearMemo(): void;
  getMemo(): string | undefined;
  setMemo(value: string): void;

  hasSequence(): boolean;
  clearSequence(): void;
  getSequence(): string | undefined;
  setSequence(value: string): void;

  hasMsgCount(): boolean;
  clearMsgCount(): void;
  getMsgCount(): number | undefined;
  setMsgCount(value: number): void;

  hasTestnet(): boolean;
  clearTestnet(): void;
  getTestnet(): boolean | undefined;
  setTestnet(value: boolean): void;

  hasDenom(): boolean;
  clearDenom(): void;
  getDenom(): string | undefined;
  setDenom(value: string): void;

  hasDecimals(): boolean;
  clearDecimals(): void;
  getDecimals(): number | undefined;
  setDecimals(value: number): void;

  hasChainName(): boolean;
  clearChainName(): void;
  getChainName(): string | undefined;
  setChainName(value: string): void;

  hasMessageTypePrefix(): boolean;
  clearMessageTypePrefix(): void;
  getMessageTypePrefix(): string | undefined;
  setMessageTypePrefix(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintSignTx.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintSignTx): TendermintSignTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintSignTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintSignTx;
  static deserializeBinaryFromReader(message: TendermintSignTx, reader: jspb.BinaryReader): TendermintSignTx;
}

export namespace TendermintSignTx {
  export type AsObject = {
    addressNList: Array<number>,
    accountNumber?: string,
    chainId?: string,
    feeAmount?: number,
    gas?: number,
    memo?: string,
    sequence?: string,
    msgCount?: number,
    testnet?: boolean,
    denom?: string,
    decimals?: number,
    chainName?: string,
    messageTypePrefix?: string,
  }
}

export class TendermintMsgRequest extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgRequest.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgRequest): TendermintMsgRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgRequest;
  static deserializeBinaryFromReader(message: TendermintMsgRequest, reader: jspb.BinaryReader): TendermintMsgRequest;
}

export namespace TendermintMsgRequest {
  export type AsObject = {
  }
}

export class TendermintMsgAck extends jspb.Message {
  hasSend(): boolean;
  clearSend(): void;
  getSend(): TendermintMsgSend | undefined;
  setSend(value?: TendermintMsgSend): void;

  hasDelegate(): boolean;
  clearDelegate(): void;
  getDelegate(): TendermintMsgDelegate | undefined;
  setDelegate(value?: TendermintMsgDelegate): void;

  hasUndelegate(): boolean;
  clearUndelegate(): void;
  getUndelegate(): TendermintMsgUndelegate | undefined;
  setUndelegate(value?: TendermintMsgUndelegate): void;

  hasRedelegate(): boolean;
  clearRedelegate(): void;
  getRedelegate(): TendermintMsgRedelegate | undefined;
  setRedelegate(value?: TendermintMsgRedelegate): void;

  hasRewards(): boolean;
  clearRewards(): void;
  getRewards(): TendermintMsgRewards | undefined;
  setRewards(value?: TendermintMsgRewards): void;

  hasIbcTransfer(): boolean;
  clearIbcTransfer(): void;
  getIbcTransfer(): TendermintMsgIBCTransfer | undefined;
  setIbcTransfer(value?: TendermintMsgIBCTransfer): void;

  hasDenom(): boolean;
  clearDenom(): void;
  getDenom(): string | undefined;
  setDenom(value: string): void;

  hasChainName(): boolean;
  clearChainName(): void;
  getChainName(): string | undefined;
  setChainName(value: string): void;

  hasMessageTypePrefix(): boolean;
  clearMessageTypePrefix(): void;
  getMessageTypePrefix(): string | undefined;
  setMessageTypePrefix(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgAck.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgAck): TendermintMsgAck.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgAck, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgAck;
  static deserializeBinaryFromReader(message: TendermintMsgAck, reader: jspb.BinaryReader): TendermintMsgAck;
}

export namespace TendermintMsgAck {
  export type AsObject = {
    send?: TendermintMsgSend.AsObject,
    delegate?: TendermintMsgDelegate.AsObject,
    undelegate?: TendermintMsgUndelegate.AsObject,
    redelegate?: TendermintMsgRedelegate.AsObject,
    rewards?: TendermintMsgRewards.AsObject,
    ibcTransfer?: TendermintMsgIBCTransfer.AsObject,
    denom?: string,
    chainName?: string,
    messageTypePrefix?: string,
  }
}

export class TendermintMsgSend extends jspb.Message {
  hasFromAddress(): boolean;
  clearFromAddress(): void;
  getFromAddress(): string | undefined;
  setFromAddress(value: string): void;

  hasToAddress(): boolean;
  clearToAddress(): void;
  getToAddress(): string | undefined;
  setToAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  hasAddressType(): boolean;
  clearAddressType(): void;
  getAddressType(): types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap] | undefined;
  setAddressType(value: types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgSend.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgSend): TendermintMsgSend.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgSend, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgSend;
  static deserializeBinaryFromReader(message: TendermintMsgSend, reader: jspb.BinaryReader): TendermintMsgSend;
}

export namespace TendermintMsgSend {
  export type AsObject = {
    fromAddress?: string,
    toAddress?: string,
    amount?: string,
    addressType?: types_pb.OutputAddressTypeMap[keyof types_pb.OutputAddressTypeMap],
  }
}

export class TendermintMsgDelegate extends jspb.Message {
  hasDelegatorAddress(): boolean;
  clearDelegatorAddress(): void;
  getDelegatorAddress(): string | undefined;
  setDelegatorAddress(value: string): void;

  hasValidatorAddress(): boolean;
  clearValidatorAddress(): void;
  getValidatorAddress(): string | undefined;
  setValidatorAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgDelegate.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgDelegate): TendermintMsgDelegate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgDelegate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgDelegate;
  static deserializeBinaryFromReader(message: TendermintMsgDelegate, reader: jspb.BinaryReader): TendermintMsgDelegate;
}

export namespace TendermintMsgDelegate {
  export type AsObject = {
    delegatorAddress?: string,
    validatorAddress?: string,
    amount?: string,
  }
}

export class TendermintMsgUndelegate extends jspb.Message {
  hasDelegatorAddress(): boolean;
  clearDelegatorAddress(): void;
  getDelegatorAddress(): string | undefined;
  setDelegatorAddress(value: string): void;

  hasValidatorAddress(): boolean;
  clearValidatorAddress(): void;
  getValidatorAddress(): string | undefined;
  setValidatorAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgUndelegate.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgUndelegate): TendermintMsgUndelegate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgUndelegate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgUndelegate;
  static deserializeBinaryFromReader(message: TendermintMsgUndelegate, reader: jspb.BinaryReader): TendermintMsgUndelegate;
}

export namespace TendermintMsgUndelegate {
  export type AsObject = {
    delegatorAddress?: string,
    validatorAddress?: string,
    amount?: string,
  }
}

export class TendermintMsgRedelegate extends jspb.Message {
  hasDelegatorAddress(): boolean;
  clearDelegatorAddress(): void;
  getDelegatorAddress(): string | undefined;
  setDelegatorAddress(value: string): void;

  hasValidatorSrcAddress(): boolean;
  clearValidatorSrcAddress(): void;
  getValidatorSrcAddress(): string | undefined;
  setValidatorSrcAddress(value: string): void;

  hasValidatorDstAddress(): boolean;
  clearValidatorDstAddress(): void;
  getValidatorDstAddress(): string | undefined;
  setValidatorDstAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgRedelegate.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgRedelegate): TendermintMsgRedelegate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgRedelegate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgRedelegate;
  static deserializeBinaryFromReader(message: TendermintMsgRedelegate, reader: jspb.BinaryReader): TendermintMsgRedelegate;
}

export namespace TendermintMsgRedelegate {
  export type AsObject = {
    delegatorAddress?: string,
    validatorSrcAddress?: string,
    validatorDstAddress?: string,
    amount?: string,
  }
}

export class TendermintMsgRewards extends jspb.Message {
  hasDelegatorAddress(): boolean;
  clearDelegatorAddress(): void;
  getDelegatorAddress(): string | undefined;
  setDelegatorAddress(value: string): void;

  hasValidatorAddress(): boolean;
  clearValidatorAddress(): void;
  getValidatorAddress(): string | undefined;
  setValidatorAddress(value: string): void;

  hasAmount(): boolean;
  clearAmount(): void;
  getAmount(): string | undefined;
  setAmount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgRewards.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgRewards): TendermintMsgRewards.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgRewards, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgRewards;
  static deserializeBinaryFromReader(message: TendermintMsgRewards, reader: jspb.BinaryReader): TendermintMsgRewards;
}

export namespace TendermintMsgRewards {
  export type AsObject = {
    delegatorAddress?: string,
    validatorAddress?: string,
    amount?: string,
  }
}

export class TendermintMsgIBCTransfer extends jspb.Message {
  hasReceiver(): boolean;
  clearReceiver(): void;
  getReceiver(): string | undefined;
  setReceiver(value: string): void;

  hasSender(): boolean;
  clearSender(): void;
  getSender(): string | undefined;
  setSender(value: string): void;

  hasSourceChannel(): boolean;
  clearSourceChannel(): void;
  getSourceChannel(): string | undefined;
  setSourceChannel(value: string): void;

  hasSourcePort(): boolean;
  clearSourcePort(): void;
  getSourcePort(): string | undefined;
  setSourcePort(value: string): void;

  hasRevisionHeight(): boolean;
  clearRevisionHeight(): void;
  getRevisionHeight(): string | undefined;
  setRevisionHeight(value: string): void;

  hasRevisionNumber(): boolean;
  clearRevisionNumber(): void;
  getRevisionNumber(): string | undefined;
  setRevisionNumber(value: string): void;

  hasDenom(): boolean;
  clearDenom(): void;
  getDenom(): string | undefined;
  setDenom(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintMsgIBCTransfer.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintMsgIBCTransfer): TendermintMsgIBCTransfer.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintMsgIBCTransfer, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintMsgIBCTransfer;
  static deserializeBinaryFromReader(message: TendermintMsgIBCTransfer, reader: jspb.BinaryReader): TendermintMsgIBCTransfer;
}

export namespace TendermintMsgIBCTransfer {
  export type AsObject = {
    receiver?: string,
    sender?: string,
    sourceChannel?: string,
    sourcePort?: string,
    revisionHeight?: string,
    revisionNumber?: string,
    denom?: string,
  }
}

export class TendermintSignedTx extends jspb.Message {
  hasPublicKey(): boolean;
  clearPublicKey(): void;
  getPublicKey(): Uint8Array | string;
  getPublicKey_asU8(): Uint8Array;
  getPublicKey_asB64(): string;
  setPublicKey(value: Uint8Array | string): void;

  hasSignature(): boolean;
  clearSignature(): void;
  getSignature(): Uint8Array | string;
  getSignature_asU8(): Uint8Array;
  getSignature_asB64(): string;
  setSignature(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TendermintSignedTx.AsObject;
  static toObject(includeInstance: boolean, msg: TendermintSignedTx): TendermintSignedTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: TendermintSignedTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): TendermintSignedTx;
  static deserializeBinaryFromReader(message: TendermintSignedTx, reader: jspb.BinaryReader): TendermintSignedTx;
}

export namespace TendermintSignedTx {
  export type AsObject = {
    publicKey: Uint8Array | string,
    signature: Uint8Array | string,
  }
}

