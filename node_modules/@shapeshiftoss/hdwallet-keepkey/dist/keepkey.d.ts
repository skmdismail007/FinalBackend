/// <reference types="node" />
import * as Messages from "@keepkey/device-protocol/lib/messages_pb";
import * as Types from "@keepkey/device-protocol/lib/types_pb";
import * as core from "@shapeshiftoss/hdwallet-core";
import { Transport } from "./transport";
export declare function isKeepKey(wallet: core.HDWallet): wallet is KeepKeyHDWallet;
export declare class KeepKeyHDWalletInfo implements core.HDWalletInfo, core.BTCWalletInfo, core.ETHWalletInfo, core.CosmosWalletInfo, core.BinanceWalletInfo, core.RippleWalletInfo, core.EosWalletInfo, core.ThorchainWalletInfo {
    readonly _supportsBTCInfo = true;
    readonly _supportsETHInfo = true;
    readonly _supportsCosmosInfo = true;
    readonly _supportsOsmosisInfo = true;
    readonly _supportsRippleInfo = true;
    readonly _supportsBinanceInfo = true;
    readonly _supportsEosInfo = true;
    readonly _supportsThorchainInfo = true;
    getVendor(): string;
    btcSupportsCoin(coin: core.Coin): Promise<boolean>;
    btcSupportsScriptType(coin: core.Coin, scriptType: core.BTCInputScriptType): Promise<boolean>;
    btcSupportsSecureTransfer(): Promise<boolean>;
    btcSupportsNativeShapeShift(): boolean;
    btcGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    btcIsSameAccount(msg: Array<core.BTCAccountPath>): boolean;
    ethSupportsNetwork(chain_id: number): Promise<boolean>;
    ethSupportsSecureTransfer(): Promise<boolean>;
    ethSupportsNativeShapeShift(): boolean;
    ethSupportsEIP1559(): Promise<boolean>;
    ethGetAccountPaths(msg: core.ETHGetAccountPath): Array<core.ETHAccountPath>;
    cosmosGetAccountPaths(msg: core.CosmosGetAccountPaths): Array<core.CosmosAccountPath>;
    osmosisGetAccountPaths(msg: core.OsmosisGetAccountPaths): Array<core.OsmosisAccountPath>;
    thorchainGetAccountPaths(msg: core.ThorchainGetAccountPaths): Array<core.ThorchainAccountPath>;
    rippleGetAccountPaths(msg: core.RippleGetAccountPaths): Array<core.RippleAccountPath>;
    binanceGetAccountPaths(msg: core.BinanceGetAccountPaths): Array<core.BinanceAccountPath>;
    eosGetAccountPaths(msg: core.EosGetAccountPaths): Array<core.EosAccountPath>;
    hasOnDevicePinEntry(): boolean;
    hasOnDevicePassphrase(): boolean;
    hasOnDeviceDisplay(): boolean;
    hasOnDeviceRecovery(): boolean;
    hasNativeShapeShift(srcCoin: core.Coin, dstCoin: core.Coin): boolean;
    supportsBip44Accounts(): boolean;
    supportsOfflineSigning(): boolean;
    supportsBroadcast(): boolean;
    describePath(msg: core.DescribePath): core.PathDescription;
    btcNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    ethNextAccountPath(msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
    cosmosNextAccountPath(msg: core.CosmosAccountPath): core.CosmosAccountPath | undefined;
    osmosisNextAccountPath(msg: core.OsmosisAccountPath): core.OsmosisAccountPath | undefined;
    thorchainNextAccountPath(msg: core.ThorchainAccountPath): core.ThorchainAccountPath | undefined;
    rippleNextAccountPath(msg: core.RippleAccountPath): core.RippleAccountPath | undefined;
    binanceNextAccountPath(msg: core.BinanceAccountPath): core.BinanceAccountPath | undefined;
    eosNextAccountPath(msg: core.EosAccountPath): core.EosAccountPath | undefined;
}
export declare class KeepKeyHDWallet implements core.HDWallet, core.BTCWallet, core.ETHWallet, core.DebugLinkWallet {
    readonly _supportsETHInfo = true;
    readonly _supportsBTCInfo = true;
    readonly _supportsCosmosInfo = true;
    readonly _supportsOsmosisInfo = true;
    readonly _supportsRippleInfo = true;
    readonly _supportsBinanceInfo = true;
    readonly _supportsEosInfo = true;
    readonly _supportsFioInfo = false;
    readonly _supportsDebugLink: boolean;
    readonly _isKeepKey = true;
    readonly _supportsETH = true;
    readonly _supportsEthSwitchChain = false;
    readonly _supportsAvalanche = false;
    readonly _supportsOptimism = false;
    readonly _supportsBSC = false;
    readonly _supportsBTC = true;
    _supportsCosmos: boolean;
    _supportsOsmosis: boolean;
    _supportsRipple: boolean;
    _supportsBinance: boolean;
    _supportsEos: boolean;
    readonly _supportsFio = false;
    readonly _supportsThorchainInfo = true;
    readonly _supportsThorchain = true;
    readonly _supportsSecretInfo = false;
    readonly _supportsSecret = false;
    readonly _supportsKava = false;
    readonly _supportsKavaInfo = false;
    readonly _supportsTerra = false;
    readonly _supportsTerraInfo = false;
    transport: Transport;
    features?: Messages.Features.AsObject;
    info: KeepKeyHDWalletInfo & core.HDWalletInfo;
    featuresCache?: Messages.Features.AsObject;
    constructor(transport: Transport);
    static create(transport: Transport): Promise<KeepKeyHDWallet>;
    getDeviceID(): Promise<string>;
    getVendor(): string;
    getModel(): Promise<string>;
    getFirmwareVersion(): Promise<string>;
    getLabel(): Promise<string>;
    isInitialized(): Promise<boolean>;
    isLocked(): Promise<boolean>;
    getPublicKeys(getPublicKeys: Array<core.GetPublicKey>): Promise<Array<core.PublicKey | null>>;
    ping(msg: core.Ping): Promise<core.Pong>;
    reset(msg: core.ResetDevice): Promise<void>;
    recover(r: core.RecoverDevice): Promise<void>;
    pressYes(): Promise<void>;
    pressNo(): Promise<void>;
    press(isYes: boolean): Promise<void>;
    hasOnDevicePinEntry(): boolean;
    hasOnDevicePassphrase(): boolean;
    hasOnDeviceDisplay(): boolean;
    hasOnDeviceRecovery(): boolean;
    hasNativeShapeShift(srcCoin: core.Coin, dstCoin: core.Coin): boolean;
    supportsBip44Accounts(): boolean;
    supportsOfflineSigning(): boolean;
    supportsBroadcast(): boolean;
    sendPin(pin: string): Promise<void>;
    sendPassphrase(passphrase: string): Promise<void>;
    sendCharacter(character: string): Promise<void>;
    sendCharacterDelete(): Promise<void>;
    sendCharacterDone(): Promise<void>;
    sendWord(word: string): Promise<void>;
    sendCharacterProto(character: string, _delete: boolean, _done: boolean): Promise<any>;
    applyPolicy(p: Required<Types.PolicyType.AsObject>): Promise<void>;
    applySettings(s: Messages.ApplySettings.AsObject): Promise<void>;
    cancel(): Promise<void>;
    changePin(): Promise<void>;
    cipherKeyValue(v: Messages.CipherKeyValue.AsObject & Required<Pick<Messages.CipherKeyValue.AsObject, "key">>): Promise<string | Uint8Array>;
    clearSession(): Promise<void>;
    decryptKeyValue(v: Messages.CipherKeyValue.AsObject & Required<Pick<Messages.CipherKeyValue.AsObject, "key">>): Promise<string | Uint8Array>;
    firmwareErase(): Promise<void>;
    firmwareUpload(firmware: Buffer): Promise<void>;
    initialize(): Promise<Messages.Features.AsObject>;
    getFeatures(cached?: boolean): Promise<Messages.Features.AsObject>;
    cacheFeatures(features?: Messages.Features.AsObject): void;
    getEntropy(size: number): Promise<Uint8Array>;
    getNumCoins(): Promise<number>;
    getCoinTable(start?: number, end?: number): Promise<Types.CoinType.AsObject[]>;
    loadDevice(msg: core.LoadDevice): Promise<void>;
    removePin(): Promise<void>;
    send(events: core.Event[]): Promise<void>;
    softReset(): Promise<void>;
    wipe(): Promise<void>;
    btcSupportsCoin(coin: core.Coin): Promise<boolean>;
    btcSupportsScriptType(coin: core.Coin, scriptType: core.BTCInputScriptType): Promise<boolean>;
    btcGetAddress(msg: core.BTCGetAddress): Promise<string>;
    btcSignTx(msg: core.BTCSignTxKK): Promise<core.BTCSignedTx>;
    btcSupportsSecureTransfer(): Promise<boolean>;
    btcSupportsNativeShapeShift(): boolean;
    ethSupportsEIP1559(): Promise<boolean>;
    btcSignMessage(msg: core.BTCSignMessage): Promise<core.BTCSignedMessage>;
    btcVerifyMessage(msg: core.BTCVerifyMessage): Promise<boolean>;
    btcGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    btcIsSameAccount(msg: Array<core.BTCAccountPath>): boolean;
    ethSignTx(msg: core.ETHSignTx): Promise<core.ETHSignedTx>;
    ethGetAddress(msg: core.ETHGetAddress): Promise<string>;
    ethSignMessage(msg: core.ETHSignMessage): Promise<core.ETHSignedMessage>;
    ethSignTypedData(msg: core.ETHSignTypedData): Promise<core.ETHSignedTypedData>;
    ethVerifyMessage(msg: core.ETHVerifyMessage): Promise<boolean>;
    ethSupportsNetwork(chain_id: number): Promise<boolean>;
    ethSupportsSecureTransfer(): Promise<boolean>;
    ethSupportsNativeShapeShift(): boolean;
    ethGetAccountPaths(msg: core.ETHGetAccountPath): Array<core.ETHAccountPath>;
    rippleGetAccountPaths(msg: core.RippleGetAccountPaths): Array<core.RippleAccountPath>;
    rippleGetAddress(msg: core.RippleGetAddress): Promise<string>;
    rippleSignTx(msg: core.RippleSignTx): Promise<core.RippleSignedTx>;
    cosmosGetAccountPaths(msg: core.CosmosGetAccountPaths): Array<core.CosmosAccountPath>;
    cosmosGetAddress(msg: core.CosmosGetAddress): Promise<string>;
    cosmosSignTx(msg: core.CosmosSignTx): Promise<core.CosmosSignedTx>;
    osmosisGetAccountPaths(msg: core.OsmosisGetAccountPaths): Array<core.OsmosisAccountPath>;
    osmosisGetAddress(msg: core.OsmosisGetAddress): Promise<string>;
    osmosisSignTx(msg: core.OsmosisSignTx): Promise<core.OsmosisSignedTx>;
    thorchainGetAccountPaths(msg: core.ThorchainGetAccountPaths): Array<core.ThorchainAccountPath>;
    thorchainGetAddress(msg: core.ThorchainGetAddress): Promise<string | null>;
    thorchainSignTx(msg: core.ThorchainSignTx): Promise<core.ThorchainSignedTx>;
    binanceGetAccountPaths(msg: core.BinanceGetAccountPaths): Array<core.BinanceAccountPath>;
    binanceGetAddress(msg: core.BinanceGetAddress): Promise<string>;
    binanceSignTx(msg: core.BinanceSignTx): Promise<core.BinanceSignedTx>;
    eosGetAccountPaths(msg: core.EosGetAccountPaths): Array<core.EosAccountPath>;
    eosGetPublicKey(msg: core.EosGetPublicKey): Promise<string>;
    eosSignTx(msg: core.EosToSignTx): Promise<core.EosTxSigned>;
    describePath(msg: core.DescribePath): core.PathDescription;
    disconnect(): Promise<void>;
    btcNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    ethNextAccountPath(msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
    eosNextAccountPath(msg: core.EosAccountPath): core.EosAccountPath | undefined;
    cosmosNextAccountPath(msg: core.CosmosAccountPath): core.CosmosAccountPath | undefined;
    osmosisNextAccountPath(msg: core.OsmosisAccountPath): core.OsmosisAccountPath | undefined;
    rippleNextAccountPath(msg: core.RippleAccountPath): core.RippleAccountPath | undefined;
    binanceNextAccountPath(msg: core.BinanceAccountPath): core.BinanceAccountPath | undefined;
}
export declare function info(): KeepKeyHDWalletInfo;
export declare function create(transport: Transport): KeepKeyHDWallet;
//# sourceMappingURL=keepkey.d.ts.map