"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Adapter = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const keepkey_1 = require("./keepkey");
const transport_1 = require("./transport");
class Adapter {
    constructor(keyring, delegate) {
        var _a, _b;
        this.keyring = keyring;
        this.delegate = delegate;
        try {
            (_b = (_a = this.delegate).registerCallbacks) === null || _b === void 0 ? void 0 : _b.call(_a, this.handleConnect.bind(this), this.handleDisconnect.bind(this));
        }
        catch (e) {
            console.error(e);
        }
    }
    static fromDelegate(delegate) {
        const fn = (keyring) => new Adapter(keyring, delegate);
        const out = fn;
        out.useKeyring = fn;
        return out;
    }
    static inspectDevice(delegate, device) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const props = (_b = (yield Promise.resolve((_a = delegate.inspectDevice) === null || _a === void 0 ? void 0 : _a.call(delegate, device)))) !== null && _b !== void 0 ? _b : (["object", "function"].includes(typeof device) ? device : {});
            if (!props.serialNumber && typeof device === "string")
                props.serialNumber = device;
            return {
                get productName() {
                    const out = props["productName"];
                    return typeof out === "string" ? out : "KeepKey";
                },
                get serialNumber() {
                    const out = props["serialNumber"];
                    if (typeof out !== "string")
                        throw new Error("could not get serialNumber from device");
                    return out;
                },
            };
        });
    }
    inspectDevice(device) {
        return __awaiter(this, void 0, void 0, function* () {
            return Adapter.inspectDevice(this.delegate, device);
        });
    }
    handleConnect(device) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.initialize([device]);
                const { productName, serialNumber } = yield this.inspectDevice(device);
                yield this.keyring.emit([productName, serialNumber, core.Events.CONNECT], serialNumber);
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    handleDisconnect(device) {
        return __awaiter(this, void 0, void 0, function* () {
            const { productName, serialNumber } = yield this.inspectDevice(device);
            try {
                yield this.keyring.remove(serialNumber);
            }
            catch (_a) {
                // swallow keyring removal errors
            }
            yield this.keyring.emit([productName, serialNumber, core.Events.DISCONNECT], serialNumber);
        });
    }
    initialize(devices, tryDebugLink, autoConnect) {
        return __awaiter(this, void 0, void 0, function* () {
            devices = devices !== null && devices !== void 0 ? devices : (yield this.getDevices());
            for (const device of devices) {
                const { serialNumber } = yield this.inspectDevice(device);
                if (this.keyring.wallets[serialNumber])
                    yield this.keyring.remove(serialNumber);
                const delegate = yield this.getTransportDelegate(device);
                if (delegate === null)
                    continue;
                const transport = yield transport_1.Transport.create(this.keyring, delegate);
                yield transport.connect();
                if (tryDebugLink)
                    yield transport.tryConnectDebugLink();
                const wallet = yield keepkey_1.KeepKeyHDWallet.create(transport);
                if (autoConnect)
                    yield wallet.initialize();
                this.keyring.add(wallet, serialNumber);
            }
            return Object.keys(this.keyring.wallets).length;
        });
    }
    getDevice(serialNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.delegate.getDevice)
                return yield this.delegate.getDevice(serialNumber);
            if (!serialNumber)
                throw new Error("no default device specified");
            const devices = yield this.getDevices();
            return (yield Promise.all(devices.map((x) => __awaiter(this, void 0, void 0, function* () { return ((yield this.inspectDevice(x)).serialNumber === serialNumber ? x : null); })))).filter((x) => x !== null)[0];
        });
    }
    getDevices() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.delegate.getDevices)
                return yield this.delegate.getDevices();
            let defaultDevice = undefined;
            try {
                defaultDevice = yield this.getDevice();
            }
            catch (_a) {
                // swallow default device fetch errors
            }
            return defaultDevice ? [defaultDevice] : [];
        });
    }
    getTransportDelegate(device) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.delegate.getTransportDelegate(device);
        });
    }
    pairDevice(serialNumber, tryDebugLink) {
        return __awaiter(this, void 0, void 0, function* () {
            const device = yield this.getDevice(serialNumber);
            if (!device)
                throw new Error(serialNumber
                    ? `could not find device matching serial number '${serialNumber}'`
                    : "could not find default device");
            return this.pairRawDevice(device, tryDebugLink);
        });
    }
    pairRawDevice(device, tryDebugLink) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initialize([device], tryDebugLink, true);
            return core.mustBeDefined(this.keyring.get((yield this.inspectDevice(device)).serialNumber));
        });
    }
}
exports.Adapter = Adapter;
//# sourceMappingURL=adapter.js.map