import * as core from "@shapeshiftoss/hdwallet-core";
import * as jspb from "google-protobuf";
export interface TransportDelegate {
    isOpened(): Promise<boolean>;
    getDeviceID(): Promise<string>;
    connect(): Promise<void>;
    tryConnectDebugLink?(): Promise<boolean>;
    disconnect(): Promise<void>;
    writeChunk(buf: Uint8Array, debugLink?: boolean): Promise<void>;
    readChunk(debugLink?: boolean): Promise<Uint8Array>;
}
export declare class Transport extends core.Transport {
    debugLink: boolean;
    userActionRequired: boolean;
    delegate: TransportDelegate;
    callInProgress: {
        main?: Promise<any>;
        debug?: Promise<any>;
    };
    constructor(keyring: core.Keyring, delegate: TransportDelegate);
    static create(keyring: core.Keyring, delegate: TransportDelegate): Promise<Transport>;
    isOpened(): Promise<boolean>;
    getDeviceID(): Promise<string>;
    connect(): Promise<void>;
    tryConnectDebugLink(): Promise<boolean>;
    disconnect(): Promise<void>;
    private write;
    private read;
    getVendor(): string;
    getEntropy(length: number): Uint8Array;
    getFirmwareHash(firmware: Uint8Array): Promise<Uint8Array>;
    /**
     * Utility function to cancel all pending calls whenver one of them is cancelled.
     */
    cancellable(inProgress?: Promise<any>): Promise<void>;
    lockDuring<T>(action: () => Promise<T>): Promise<T>;
    handleCancellableResponse(): Promise<core.Event>;
    readResponse(debugLink: boolean): Promise<core.Event>;
    call(msgTypeEnum: number, msg: jspb.Message, options?: {
        msgTimeout?: number;
        omitLock?: boolean;
        noWait?: false;
        debugLink?: boolean;
    }): Promise<core.Event>;
    call(msgTypeEnum: number, msg: jspb.Message, options: {
        msgTimeout?: number;
        omitLock?: boolean;
        noWait: true;
        debugLink?: boolean;
    }): Promise<undefined>;
    cancel(): Promise<void>;
    protected toMessageBuffer(msgTypeEnum: number, msg: jspb.Message): Uint8Array;
    protected fromMessageBuffer(buf: Uint8Array): [number, jspb.Message];
    protected static failureMessageFactory(e?: Error | string): Uint8Array;
}
//# sourceMappingURL=transport.d.ts.map