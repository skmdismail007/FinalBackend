"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateOutputScriptType = exports.translateInputScriptType = exports.toUTF8Array = exports.protoFieldToSetMethod = exports.SEGMENT_SIZE = void 0;
const Types = __importStar(require("@keepkey/device-protocol/lib/types_pb"));
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
exports.SEGMENT_SIZE = 63;
// Shim until this exists for jspb https://github.com/protocolbuffers/protobuf/issues/1591
function protoFieldToSetMethod(fieldName) {
    return `set${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}`;
}
exports.protoFieldToSetMethod = protoFieldToSetMethod;
// https://gist.github.com/joni/3760795/8f0c1a608b7f0c8b3978db68105c5b1d741d0446
function toUTF8Array(str) {
    const utf8 = [];
    for (let i = 0; i < str.length; i++) {
        let charcode = str.charCodeAt(i);
        if (charcode < 0x80)
            utf8.push(charcode);
        else if (charcode < 0x800) {
            utf8.push(0xc0 | (charcode >> 6), 0x80 | (charcode & 0x3f));
        }
        else if (charcode < 0xd800 || charcode >= 0xe000) {
            utf8.push(0xe0 | (charcode >> 12), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
        }
        // surrogate pair
        else {
            i++;
            charcode = ((charcode & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff);
            utf8.push(0xf0 | (charcode >> 18), 0x80 | ((charcode >> 12) & 0x3f), 0x80 | ((charcode >> 6) & 0x3f), 0x80 | (charcode & 0x3f));
        }
    }
    return new Uint8Array(utf8);
}
exports.toUTF8Array = toUTF8Array;
function translateInputScriptType(scriptType) {
    switch (scriptType) {
        case core.BTCInputScriptType.CashAddr:
        case core.BTCInputScriptType.SpendAddress:
            return Types.InputScriptType.SPENDADDRESS;
        case core.BTCInputScriptType.SpendMultisig:
            return Types.InputScriptType.SPENDMULTISIG;
        case core.BTCInputScriptType.SpendP2SHWitness:
            return Types.InputScriptType.SPENDP2SHWITNESS;
        case core.BTCInputScriptType.SpendWitness:
            return Types.InputScriptType.SPENDWITNESS;
    }
    throw new Error("unhandled InputSriptType enum: " + scriptType);
}
exports.translateInputScriptType = translateInputScriptType;
function translateOutputScriptType(scriptType) {
    switch (scriptType) {
        case core.BTCOutputScriptType.PayToAddress:
            return Types.OutputScriptType.PAYTOADDRESS;
        case core.BTCOutputScriptType.PayToMultisig:
            return Types.OutputScriptType.PAYTOMULTISIG;
        case core.BTCOutputScriptType.PayToP2SHWitness:
            return Types.OutputScriptType.PAYTOP2SHWITNESS;
        case core.BTCOutputScriptType.PayToWitness:
            return Types.OutputScriptType.PAYTOWITNESS;
    }
    throw new Error("unhandled OutputScriptType enum: " + scriptType);
}
exports.translateOutputScriptType = translateOutputScriptType;
//# sourceMappingURL=utils.js.map