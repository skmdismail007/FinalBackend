"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.binanceGetAddress = exports.binanceSignTx = exports.binanceGetAccountPaths = void 0;
const Messages = __importStar(require("@keepkey/device-protocol/lib/messages_pb"));
const BinanceMessages = __importStar(require("@keepkey/device-protocol/lib/messages-binance_pb"));
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const crypto_js_1 = __importDefault(require("crypto-js"));
const bnbencoding_1 = require("./bnbencoding");
function binanceGetAccountPaths(msg) {
    return [
        {
            addressNList: [0x80000000 + 44, 0x80000000 + core.slip44ByCoin("Binance"), 0x80000000 + msg.accountIdx, 0, 0],
        },
    ];
}
exports.binanceGetAccountPaths = binanceGetAccountPaths;
function binanceSignTx(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
            if (msg.testnet)
                throw new Error("testnet not supported");
            const partialTx = Object.assign({}, msg.tx);
            if (!partialTx.data)
                partialTx.data = null;
            if (!partialTx.memo)
                partialTx.memo = "";
            if (!partialTx.sequence)
                partialTx.sequence = "0";
            if (!partialTx.source)
                partialTx.source = "0";
            if (!partialTx.account_number)
                throw new Error("account_number is required");
            if (!partialTx.chain_id)
                throw new Error("chain_id is required");
            const tx = partialTx;
            if (tx.data)
                throw new Error("tx data field not supported");
            const signTx = new BinanceMessages.BinanceSignTx();
            signTx.setAddressNList(msg.addressNList);
            signTx.setAccountNumber(tx.account_number);
            signTx.setChainId(tx.chain_id);
            signTx.setSequence(tx.sequence);
            if (tx.memo)
                signTx.setMemo(tx.memo);
            //verify not a batch tx
            if (msg.tx.msgs.length > 1)
                throw new Error("Binance batch sending not supported!");
            const message = msg.tx.msgs[0];
            //tell device not a batch tx
            signTx.setMsgCount(1);
            //tell device im about to send a tx to sign
            let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCESIGNTX, signTx, {
                msgTimeout: core.LONG_TIMEOUT,
                omitLock: true,
            });
            const outputAmount = new bignumber_js_1.default(message.outputs[0].coins[0].amount);
            const inputAmount = new bignumber_js_1.default(message.inputs[0].coins[0].amount);
            if (!outputAmount.isInteger())
                throw new Error("Output amount must be an integer");
            if (!inputAmount.isInteger())
                throw new Error("Input amount must be an integer");
            const coinOut = new BinanceMessages.BinanceTransferMsg.BinanceCoin();
            coinOut.setAmount(outputAmount.toString());
            coinOut.setDenom(message.outputs[0].coins[0].denom);
            const outputs = new BinanceMessages.BinanceTransferMsg.BinanceInputOutput();
            outputs.setAddress(message.outputs[0].address);
            outputs.setCoinsList([coinOut]);
            const coinIn = new BinanceMessages.BinanceTransferMsg.BinanceCoin();
            coinIn.setAmount(inputAmount.toString());
            coinIn.setDenom(message.inputs[0].coins[0].denom);
            const inputs = new BinanceMessages.BinanceTransferMsg.BinanceInputOutput();
            inputs.setAddress(message.inputs[0].address);
            inputs.setCoinsList([coinIn]);
            const send = new BinanceMessages.BinanceTransferMsg();
            send.addInputs(inputs);
            send.addOutputs(outputs);
            //sent tx to device
            resp = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCETRANSFERMSG, send, {
                msgTimeout: core.LONG_TIMEOUT,
                omitLock: true,
            });
            if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_BINANCESIGNEDTX) {
                throw new Error(`binance: unexpected response ${resp.message_type}`);
            }
            const signedTx = new BinanceMessages.BinanceSignedTx();
            signedTx.setSignature(resp.message.signature);
            signedTx.setPublicKey(resp.message.publicKey);
            const serialized = bnbencoding_1.encodeBnbTx(tx, Buffer.from(signedTx.getPublicKey_asU8()), Buffer.from(signedTx.getSignature_asU8())).toString("hex");
            const out = Object.assign(Object.assign({}, tx), { signatures: {
                    pub_key: signedTx.getPublicKey_asB64(),
                    signature: signedTx.getSignature_asB64(),
                }, serialized, txid: crypto_js_1.default.SHA256(crypto_js_1.default.enc.Hex.parse(serialized)).toString() });
            return out;
        }));
    });
}
exports.binanceSignTx = binanceSignTx;
function binanceGetAddress(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new BinanceMessages.BinanceGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_BINANCEGETADDRESS, getAddr, {
            msgTimeout: core.LONG_TIMEOUT,
        });
        const binanceAddress = response.proto;
        return core.mustBeDefined(binanceAddress.getAddress());
    });
}
exports.binanceGetAddress = binanceGetAddress;
//# sourceMappingURL=binance.js.map