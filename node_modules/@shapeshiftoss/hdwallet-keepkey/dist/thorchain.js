"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.thorchainSignTx = exports.thorchainGetAddress = exports.thorchainGetAccountPaths = void 0;
const Messages = __importStar(require("@keepkey/device-protocol/lib/messages_pb"));
const ThorchainMessages = __importStar(require("@keepkey/device-protocol/lib/messages-thorchain_pb"));
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const bs58check_1 = __importDefault(require("bs58check"));
const p_lazy_1 = __importDefault(require("p-lazy"));
const protoTxBuilder = p_lazy_1.default.from(() => Promise.resolve().then(() => __importStar(require("@shapeshiftoss/proto-tx-builder"))));
function thorchainGetAccountPaths(msg) {
    return [
        {
            addressNList: [0x80000000 + 44, 0x80000000 + core.slip44ByCoin("Thorchain"), 0x80000000 + msg.accountIdx, 0, 0],
        },
    ];
}
exports.thorchainGetAccountPaths = thorchainGetAccountPaths;
function thorchainGetAddress(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new ThorchainMessages.ThorchainGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        if (msg.testnet !== undefined)
            getAddr.setTestnet(msg.testnet);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_THORCHAINGETADDRESS, getAddr, {
            msgTimeout: core.LONG_TIMEOUT,
        });
        const thorchainAddress = response.proto;
        return core.mustBeDefined(thorchainAddress.getAddress());
    });
}
exports.thorchainGetAddress = thorchainGetAddress;
function thorchainSignTx(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        const address = yield thorchainGetAddress(transport, { addressNList: msg.addressNList });
        const getPublicKeyMsg = new Messages.GetPublicKey();
        getPublicKeyMsg.setAddressNList(msg.addressNList);
        getPublicKeyMsg.setEcdsaCurveName("secp256k1");
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_GETPUBLICKEY, getPublicKeyMsg, {
            msgTimeout: core.DEFAULT_TIMEOUT,
        });
        const pubkeyMsg = response.proto;
        const pubkey = bs58check_1.default.decode(core.mustBeDefined(pubkeyMsg.getXpub())).slice(45);
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
            const signTx = new ThorchainMessages.ThorchainSignTx();
            signTx.setAddressNList(msg.addressNList);
            signTx.setAccountNumber(msg.account_number);
            signTx.setChainId(msg.chain_id);
            signTx.setFeeAmount(parseInt(msg.tx.fee.amount[0].amount));
            signTx.setGas(parseInt(msg.tx.fee.gas));
            signTx.setSequence(msg.sequence);
            if (msg.tx.memo !== undefined)
                signTx.setMemo(msg.tx.memo);
            signTx.setMsgCount(1);
            let resp = yield transport.call(Messages.MessageType.MESSAGETYPE_THORCHAINSIGNTX, signTx, {
                msgTimeout: core.LONG_TIMEOUT,
                omitLock: true,
            });
            for (const m of msg.tx.msg) {
                if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_THORCHAINMSGREQUEST) {
                    throw new Error(`THORChain: unexpected response ${resp.message_type}`);
                }
                let ack;
                if (m.type === "thorchain/MsgSend") {
                    if (m.value.amount.length !== 1) {
                        throw new Error("THORChain: Multiple amounts per MsgSend not supported");
                    }
                    const denom = m.value.amount[0].denom;
                    if (denom !== "rune") {
                        throw new Error("THORChain: Unsupported denomination: " + denom);
                    }
                    const send = new ThorchainMessages.ThorchainMsgSend();
                    send.setFromAddress(m.value.from_address);
                    send.setToAddress(m.value.to_address);
                    send.setAmount(m.value.amount[0].amount);
                    ack = new ThorchainMessages.ThorchainMsgAck();
                    ack.setSend(send);
                }
                else if (m.type === "thorchain/MsgDeposit") {
                    if (m.value.coins.length !== 1) {
                        throw new Error("THORChain: Multiple amounts per MsgDeposit not supported");
                    }
                    const coinAsset = m.value.coins[0].asset;
                    if (coinAsset !== "THOR.RUNE") {
                        throw new Error("THORChain: Unsupported coin asset: " + coinAsset);
                    }
                    const deposit = new ThorchainMessages.ThorchainMsgDeposit();
                    deposit.setAsset(m.value.coins[0].asset);
                    deposit.setAmount(m.value.coins[0].amount);
                    deposit.setMemo(m.value.memo);
                    deposit.setSigner(m.value.signer);
                    ack = new ThorchainMessages.ThorchainMsgAck();
                    ack.setDeposit(deposit);
                }
                else {
                    throw new Error(`THORChain: Message ${m.type} is not yet supported`);
                }
                resp = yield transport.call(Messages.MessageType.MESSAGETYPE_THORCHAINMSGACK, ack, {
                    msgTimeout: core.LONG_TIMEOUT,
                    omitLock: true,
                });
            }
            if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_THORCHAINSIGNEDTX) {
                throw new Error(`THORChain: unexpected response ${resp.message_type}`);
            }
            const signedTx = resp.proto;
            const offlineSigner = {
                getAccounts() {
                    return __awaiter(this, void 0, void 0, function* () {
                        return [
                            {
                                address,
                                algo: "secp256k1",
                                pubkey,
                            },
                        ];
                    });
                },
                signAmino(signerAddress, signDoc) {
                    return __awaiter(this, void 0, void 0, function* () {
                        if (signerAddress !== address)
                            throw new Error("expected signerAddress to match address");
                        return {
                            signed: signDoc,
                            signature: {
                                pub_key: {
                                    type: "tendermint/PubKeySecp256k1",
                                    value: signedTx.getPublicKey_asB64(),
                                },
                                signature: signedTx.getSignature_asB64(),
                            },
                        };
                    });
                },
            };
            const signerData = {
                sequence: Number(msg.sequence),
                accountNumber: Number(msg.account_number),
                chainId: msg.chain_id,
            };
            return (yield protoTxBuilder).sign(address, msg.tx, offlineSigner, signerData, "thor");
        }));
    });
}
exports.thorchainSignTx = thorchainSignTx;
//# sourceMappingURL=thorchain.js.map