"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageTypeRegistry = exports.messageNameRegistry = void 0;
const Messages = __importStar(require("@keepkey/device-protocol/lib/messages_pb"));
const BinanceMessages = __importStar(require("@keepkey/device-protocol/lib/messages-binance_pb"));
const CosmosMessages = __importStar(require("@keepkey/device-protocol/lib/messages-cosmos_pb"));
const EosMessages = __importStar(require("@keepkey/device-protocol/lib/messages-eos_pb"));
const NanoMessages = __importStar(require("@keepkey/device-protocol/lib/messages-nano_pb"));
const RippleMessages = __importStar(require("@keepkey/device-protocol/lib/messages-ripple_pb"));
const ThorchainMessages = __importStar(require("@keepkey/device-protocol/lib/messages-thorchain_pb"));
const lodash_1 = __importDefault(require("lodash"));
// Conflict between typedef and actual js export
const AllMessages = []
    .concat(Object.entries(lodash_1.default.omit(Messages, "MessageType", "MessageTypeMap")))
    .concat(Object.entries(CosmosMessages))
    .concat(Object.entries(BinanceMessages))
    .concat(Object.entries(RippleMessages))
    .concat(Object.entries(NanoMessages))
    .concat(Object.entries(lodash_1.default.omit(EosMessages, "EosPublicKeyKind", "EosPublicKeyKindMap")))
    .concat(Object.entries(ThorchainMessages));
const upperCasedMessageClasses = AllMessages.reduce((registry, entry) => {
    registry[entry[0].toUpperCase()] = entry[1];
    return registry;
}, {});
// Map of message type enums to human readable message name
exports.messageNameRegistry = Object.entries(Messages.MessageType).reduce((registry, entry) => {
    registry[entry[1]] = entry[0].split("_")[1];
    return registry;
}, {});
// Map of message type enum to their protobuf constructor
exports.messageTypeRegistry = Object.entries(Messages.MessageType).reduce((registry, entry) => {
    registry[entry[1]] = upperCasedMessageClasses[entry[0].split("_")[1].toUpperCase()];
    return registry;
}, {});
//# sourceMappingURL=typeRegistry.js.map