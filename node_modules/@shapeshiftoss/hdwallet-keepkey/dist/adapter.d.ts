import * as core from "@shapeshiftoss/hdwallet-core";
import { KeepKeyHDWallet } from "./keepkey";
import { TransportDelegate } from "./transport";
export interface AdapterConstructor<DelegateType extends AdapterDelegate<unknown>> {
    new (keyring: core.Keyring): Adapter<DelegateType>;
    useKeyring(keyring: core.Keyring): Adapter<DelegateType>;
}
export declare type DeviceProperties = {
    productName: string;
    serialNumber: string;
};
export interface AdapterDelegate<DeviceType> {
    inspectDevice?(device: DeviceType): Promise<Partial<DeviceProperties>>;
    getDevice?(serialNumber?: string): Promise<DeviceType>;
    getDevices?(): Promise<Array<DeviceType>>;
    getTransportDelegate(device: DeviceType): Promise<TransportDelegate | null>;
    registerCallbacks?(handleConnect: (device: DeviceType) => void, handleDisconnect: (device: DeviceType) => void): void;
}
export declare type DeviceType<T extends AdapterDelegate<any>> = T extends AdapterDelegate<infer R> ? R : never;
export declare class Adapter<DelegateType extends AdapterDelegate<any>> {
    keyring: core.Keyring;
    delegate: DelegateType;
    private constructor();
    static fromDelegate<DelegateType extends AdapterDelegate<unknown>>(delegate: DelegateType): AdapterConstructor<DelegateType>;
    static inspectDevice<DelegateType extends AdapterDelegate<any>>(delegate: DelegateType, device: DeviceType<DelegateType>): Promise<DeviceProperties>;
    inspectDevice(device: DeviceType<DelegateType>): Promise<DeviceProperties>;
    private handleConnect;
    private handleDisconnect;
    initialize(devices?: Array<DeviceType<DelegateType>>, tryDebugLink?: boolean, autoConnect?: boolean): Promise<number>;
    getDevice(serialNumber?: string): Promise<DeviceType<DelegateType>>;
    getDevices(): Promise<Array<DeviceType<DelegateType>>>;
    getTransportDelegate(device: DeviceType<DelegateType>): Promise<TransportDelegate | null>;
    pairDevice(serialNumber?: string, tryDebugLink?: boolean): Promise<KeepKeyHDWallet>;
    pairRawDevice(device: DeviceType<DelegateType>, tryDebugLink?: boolean): Promise<KeepKeyHDWallet>;
}
//# sourceMappingURL=adapter.d.ts.map