"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rippleGetAddress = exports.rippleSignTx = exports.rippleGetAccountPaths = void 0;
const Messages = __importStar(require("@keepkey/device-protocol/lib/messages_pb"));
const RippleMessages = __importStar(require("@keepkey/device-protocol/lib/messages-ripple_pb"));
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const lodash_1 = __importDefault(require("lodash"));
function rippleGetAccountPaths(msg) {
    return [
        {
            addressNList: [0x80000000 + 44, 0x80000000 + core.slip44ByCoin("Ripple"), 0x80000000 + msg.accountIdx, 0, 0],
        },
    ];
}
exports.rippleGetAccountPaths = rippleGetAccountPaths;
function rippleSignTx(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return transport.lockDuring(() => __awaiter(this, void 0, void 0, function* () {
            const signTx = new RippleMessages.RippleSignTx();
            signTx.setAddressNList(msg.addressNList);
            signTx.setFee(parseInt(msg.tx.value.fee.amount[0].amount));
            signTx.setSequence(parseInt(msg.sequence));
            signTx.setLastLedgerSequence(parseInt(msg.lastLedgerSequence));
            const payment = new RippleMessages.RipplePayment();
            payment.setAmount(parseInt(msg.payment.amount));
            payment.setDestination(msg.payment.destination);
            if (msg.payment.destinationTag !== undefined)
                payment.setDestinationTag(parseInt(msg.payment.destinationTag));
            signTx.setPayment(payment);
            const resp = yield transport.call(Messages.MessageType.MESSAGETYPE_RIPPLESIGNTX, signTx, {
                msgTimeout: core.LONG_TIMEOUT,
                omitLock: true,
            });
            for (const m of msg.tx.value.msg) {
                if (m.type === "ripple-sdk/MsgSend") {
                    if (m.value.amount.length !== 1) {
                        throw new Error("ripple: Multiple amounts per msg not supported");
                    }
                    const denom = m.value.amount[0].denom;
                    if (denom !== "drop") {
                        throw new Error("ripple: Unsupported denomination: " + denom);
                    }
                }
                else {
                    throw new Error(`ripple: Message ${m.type} is not yet supported`);
                }
            }
            if (resp.message_enum !== Messages.MessageType.MESSAGETYPE_RIPPLESIGNEDTX) {
                throw new Error(`ripple: unexpected response ${resp.message_type}`);
            }
            const signedTx = resp.proto;
            const signed = lodash_1.default.cloneDeep(msg.tx);
            signed.value.signatures = [
                {
                    serializedTx: signedTx.getSerializedTx_asB64(),
                    signature: signedTx.getSignature_asB64(),
                },
            ];
            return signed;
        }));
    });
}
exports.rippleSignTx = rippleSignTx;
function rippleGetAddress(transport, msg) {
    return __awaiter(this, void 0, void 0, function* () {
        const getAddr = new RippleMessages.RippleGetAddress();
        getAddr.setAddressNList(msg.addressNList);
        getAddr.setShowDisplay(msg.showDisplay !== false);
        const response = yield transport.call(Messages.MessageType.MESSAGETYPE_RIPPLEGETADDRESS, getAddr, {
            msgTimeout: core.LONG_TIMEOUT,
        });
        const rippleAddress = response.proto;
        return core.mustBeDefined(rippleAddress.getAddress());
    });
}
exports.rippleGetAddress = rippleGetAddress;
//# sourceMappingURL=ripple.js.map